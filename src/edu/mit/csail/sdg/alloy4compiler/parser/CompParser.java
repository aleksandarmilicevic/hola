
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 31 16:47:48 EST 2015
//----------------------------------------------------

package edu.mit.csail.sdg.alloy4compiler.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.Attr.AttrType;
import edu.mit.csail.sdg.alloy4compiler.ast.CommandScope;
import edu.mit.csail.sdg.alloy4compiler.ast.Decl;
import edu.mit.csail.sdg.alloy4compiler.ast.Expr;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBadJoin;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprITE;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprLet;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprList;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQt;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprFix;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import edu.mit.csail.sdg.alloy4compiler.ast.IntScope;
import edu.mit.csail.sdg.alloy4compiler.ast.IntSubsetScope;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig.PrimSig;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 31 16:47:48 EST 2015
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\002\124\003\000\002\002\004\000\002\125" +
    "\005\000\002\125\010\000\002\125\010\000\002\125\013" +
    "\000\002\125\006\000\002\125\010\000\002\125\011\000" +
    "\002\125\013\000\002\125\011\000\002\125\010\000\002" +
    "\125\005\000\002\125\006\000\002\125\006\000\002\125" +
    "\005\000\002\125\006\000\002\125\006\000\002\125\004" +
    "\000\002\125\004\000\002\125\004\000\002\125\004\000" +
    "\002\125\004\000\002\125\004\000\002\125\002\000\002" +
    "\013\003\000\002\013\003\000\002\012\007\000\002\012" +
    "\006\000\002\012\011\000\002\012\010\000\002\012\007" +
    "\000\002\012\006\000\002\012\011\000\002\012\010\000" +
    "\002\030\002\000\002\030\004\000\002\112\004\000\002" +
    "\112\006\000\002\112\004\000\002\112\002\000\002\130" +
    "\003\000\002\130\005\000\002\127\004\000\002\127\004" +
    "\000\002\127\004\000\002\127\004\000\002\127\004\000" +
    "\002\127\004\000\002\127\004\000\002\127\004\000\002" +
    "\053\003\000\002\053\003\000\002\054\005\000\002\055" +
    "\003\000\002\055\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\057\003\000\002\057\003\000" +
    "\002\057\005\000\002\061\003\000\002\061\005\000\002" +
    "\060\003\000\002\060\006\000\002\060\010\000\002\060" +
    "\003\000\002\060\006\000\002\052\003\000\002\052\006" +
    "\000\002\052\010\000\002\027\004\000\002\027\007\000" +
    "\002\027\011\000\002\027\006\000\002\126\003\000\002" +
    "\126\003\000\002\063\011\000\002\063\010\000\002\063" +
    "\011\000\002\063\010\000\002\063\006\000\002\064\003" +
    "\000\002\064\004\000\002\040\013\000\002\040\013\000" +
    "\002\040\010\000\002\040\015\000\002\040\015\000\002" +
    "\040\012\000\002\104\011\000\002\104\011\000\002\104" +
    "\006\000\002\104\013\000\002\104\013\000\002\104\010" +
    "\000\002\141\002\000\002\141\003\000\002\114\006\000" +
    "\002\113\011\000\002\116\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\116\003\000\002\117" +
    "\003\000\002\117\004\000\002\115\004\000\002\115\004" +
    "\000\002\115\004\000\002\115\002\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\120\003\000\002" +
    "\120\006\000\002\120\005\000\002\120\003\000\002\122" +
    "\002\000\002\122\003\000\002\121\003\000\002\121\005" +
    "\000\002\123\003\000\002\123\005\000\002\067\003\000" +
    "\002\067\006\000\002\065\003\000\002\065\005\000\002" +
    "\066\003\000\002\066\005\000\002\070\003\000\002\070" +
    "\005\000\002\071\003\000\002\071\005\000\002\072\003" +
    "\000\002\072\005\000\002\073\003\000\002\073\004\000" +
    "\002\073\005\000\002\073\006\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\007\000\002\014" +
    "\006\000\002\014\005\000\002\014\007\000\002\014\007" +
    "\000\002\014\007\000\002\014\010\000\002\014\007\000" +
    "\002\014\006\000\002\015\003\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\007\000\002\015" +
    "\006\000\002\015\005\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\010\000\002\015\007\000" +
    "\002\015\006\000\002\020\005\000\002\020\003\000\002" +
    "\016\005\000\002\016\003\000\002\017\002\000\002\017" +
    "\003\000\002\017\005\000\002\017\004\000\002\062\006" +
    "\000\002\062\007\000\002\033\002\000\002\033\003\000" +
    "\002\032\005\000\002\032\004\000\002\034\003\000\002" +
    "\034\004\000\002\035\004\000\002\035\003\000\002\036" +
    "\002\000\002\036\003\000\002\037\003\000\002\037\005" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\100\003\000\002\100\005\000\002\101\003\000\002\101" +
    "\005\000\002\025\003\000\002\025\005\000\002\026\003" +
    "\000\002\026\005\000\002\041\003\000\002\041\003\000" +
    "\002\043\003\000\002\043\007\000\002\045\007\000\002" +
    "\045\005\000\002\043\007\000\002\045\005\000\002\042" +
    "\003\000\002\042\003\000\002\044\003\000\002\044\007" +
    "\000\002\046\007\000\002\046\005\000\002\002\003\000" +
    "\002\002\005\000\002\003\003\000\002\003\005\000\002" +
    "\074\003\000\002\074\004\000\002\074\004\000\002\075" +
    "\003\000\002\075\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\131\003" +
    "\000\002\131\005\000\002\131\005\000\002\131\005\000" +
    "\002\132\003\000\002\132\005\000\002\132\005\000\002" +
    "\132\005\000\002\135\003\000\002\135\005\000\002\135" +
    "\005\000\002\135\005\000\002\135\005\000\002\135\005" +
    "\000\002\135\005\000\002\135\005\000\002\135\005\000" +
    "\002\135\005\000\002\135\005\000\002\135\005\000\002" +
    "\136\003\000\002\136\005\000\002\136\005\000\002\136" +
    "\005\000\002\136\005\000\002\136\005\000\002\136\005" +
    "\000\002\136\005\000\002\136\005\000\002\136\005\000" +
    "\002\136\005\000\002\136\005\000\002\133\003\000\002" +
    "\133\005\000\002\133\005\000\002\133\005\000\002\134" +
    "\003\000\002\134\005\000\002\134\005\000\002\134\005" +
    "\000\002\076\003\000\002\076\004\000\002\076\004\000" +
    "\002\076\004\000\002\076\004\000\002\076\004\000\002" +
    "\076\004\000\002\076\004\000\002\076\004\000\002\077" +
    "\003\000\002\077\004\000\002\077\004\000\002\077\004" +
    "\000\002\077\004\000\002\077\004\000\002\102\003\000" +
    "\002\102\005\000\002\103\003\000\002\103\005\000\002" +
    "\047\003\000\002\047\005\000\002\050\003\000\002\050" +
    "\005\000\002\107\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003\000\002\107\003\000\002\107\003\000\002\107\003" +
    "\000\002\110\003\000\002\110\005\000\002\111\003\000" +
    "\002\111\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\105\003\000\002\105" +
    "\005\000\002\106\003\000\002\106\005\000\002\006\003" +
    "\000\002\007\003\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\023\003\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\137\004\000\002\137\004\000" +
    "\002\137\004\000\002\137\004\000\002\137\004\000\002" +
    "\137\004\000\002\140\003\000\002\140\004\000\002\140" +
    "\004\000\002\140\004\000\002\051\003\000\002\051\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\006\000\002\004\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0337\000\002\001\uffe9\000\004\002\u0339\001\002\000" +
    "\034\002\001\046\030\054\011\063\021\100\020\121\006" +
    "\126\023\142\031\151\012\156\025\164\013\165\017\174" +
    "\032\001\uffa0\000\002\001\uff9b\000\002\001\uffec\000\002" +
    "\001\uffeb\000\014\114\250\157\056\201\051\207\046\211" +
    "\u0334\001\002\000\014\072\uff9f\103\uff9f\116\uff9f\143\uff9f" +
    "\150\uff9f\001\uff98\000\002\001\uff97\000\012\114\250\157" +
    "\056\201\051\207\046\001\002\000\002\001\uffed\000\002" +
    "\001\uffee\000\004\207\u0322\001\002\000\014\114\250\157" +
    "\056\201\051\207\046\211\u031d\001\002\000\002\001\uffe8" +
    "\000\002\001\uffef\000\010\157\056\201\051\207\046\001" +
    "\002\000\016\046\030\121\006\142\031\151\u030b\164\013" +
    "\174\032\001\002\000\002\001\uffe7\000\010\157\056\201" +
    "\051\207\046\001\002\000\004\111\u02a8\001\uffea\000\002" +
    "\001\uff9c\000\002\001\uff9a\000\002\001\uff99\000\014\072" +
    "\034\103\040\116\035\143\037\150\036\001\002\000\010" +
    "\157\056\201\051\207\046\001\002\000\010\157\056\201" +
    "\051\207\046\001\002\000\020\131\050\157\044\167\052" +
    "\176\043\201\051\203\047\207\046\001\002\000\012\070" +
    "\u026d\157\056\201\051\207\046\001\002\000\020\131\050" +
    "\157\044\167\052\176\043\201\051\203\047\207\046\001" +
    "\002\000\002\001\uff82\000\010\064\u025c\115\u025e\122\u025d" +
    "\001\uff91\000\002\001\uff8f\000\004\172\u0139\001\002\000" +
    "\004\172\061\001\uff80\000\002\001\uff7e\000\002\001\uff90" +
    "\000\002\001\uff8b\000\004\172\u014c\001\002\000\004\122" +
    "\u024f\001\uff8e\000\004\070\054\001\002\000\010\157\056" +
    "\201\051\207\046\001\002\000\010\064\063\115\065\122" +
    "\064\001\002\000\004\172\057\001\002\000\004\207\046" +
    "\001\002\000\004\172\061\001\uff81\000\004\207\062\001" +
    "\002\000\002\001\uff7d\000\124\031\124\032\150\033\154" +
    "\034\155\041\113\042\207\047\130\050\201\055\105\062" +
    "\216\066\231\101\160\106\226\107\122\113\172\114\131" +
    "\116\223\120\212\121\157\122\133\127\156\130\220\131" +
    "\050\132\140\141\117\142\161\157\205\160\204\167\052" +
    "\173\166\174\213\175\167\176\043\177\203\200\125\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\002" +
    "\000\022\065\076\066\066\075\070\145\067\151\077\157" +
    "\056\201\051\207\046\001\uff57\000\022\065\076\066\066" +
    "\075\070\145\067\151\077\157\056\201\051\207\046\001" +
    "\uff57\000\010\157\056\201\051\207\046\001\002\000\010" +
    "\157\056\201\051\207\046\001\002\000\010\157\056\201" +
    "\051\207\046\001\002\000\002\001\uff7c\000\004\065\u0237" +
    "\001\uff56\000\002\001\uff68\000\010\064\u01ff\065\102\073" +
    "\u0233\001\002\000\004\154\u022f\001\002\000\022\065\076" +
    "\066\066\075\070\145\067\151\077\157\056\201\051\207" +
    "\046\001\uff57\000\012\066\100\157\056\201\051\207\046" +
    "\001\002\000\010\157\056\201\051\207\046\001\002\000" +
    "\010\064\104\065\102\073\103\001\002\000\010\157\056" +
    "\201\051\207\046\001\002\000\124\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\047\130\050\201\055\105" +
    "\062\216\066\u0226\101\160\106\226\107\122\113\172\114" +
    "\131\116\223\120\212\121\157\122\133\127\156\130\220" +
    "\131\050\132\140\141\117\142\161\157\205\160\204\167" +
    "\052\173\166\174\213\175\167\176\043\177\203\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\124\031\124\032\150\033\154\034\155\041\113" +
    "\042\207\047\130\050\201\055\105\062\216\066\174\101" +
    "\160\106\226\107\122\113\172\114\131\116\223\120\212" +
    "\121\157\122\133\127\156\130\220\131\050\132\140\141" +
    "\117\142\161\157\205\160\204\167\052\173\166\174\213" +
    "\175\167\176\043\177\203\200\125\201\176\202\141\203" +
    "\047\207\046\210\153\211\143\001\002\000\010\157\056" +
    "\201\051\207\046\001\002\000\002\001\uff2c\000\002\001" +
    "\uff2e\000\002\001\uff43\000\006\052\u021b\111\u021a\001\uff20" +
    "\000\002\001\uff28\000\106\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\050\201\055\105\062\304\066\231" +
    "\101\160\106\276\107\122\113\277\114\131\116\223\120" +
    "\212\122\133\127\156\131\050\141\117\157\044\167\052" +
    "\173\166\175\301\176\043\177\203\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\044" +
    "\004\371\005\356\006\372\007\364\010\365\011\374\012" +
    "\367\013\361\014\375\015\363\016\360\017\366\020\357" +
    "\021\370\022\362\023\376\067\u0215\001\ufe9a\000\002\001" +
    "\ufe9c\000\002\001\ufec7\000\020\066\066\075\070\145\067" +
    "\151\077\157\056\201\051\207\046\001\002\000\002\001" +
    "\ufecb\000\004\147\u0211\001\ufeba\000\002\001\ufe73\000\002" +
    "\001\ufec3\000\002\001\ufe71\000\110\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\115" +
    "\332\116\223\120\212\122\133\127\156\131\050\141\117" +
    "\157\044\167\052\173\166\175\167\176\043\177\203\200" +
    "\125\201\176\202\141\203\047\207\046\210\153\211\143" +
    "\001\002\000\002\001\uff1a\000\002\001\uff1c\000\066\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\055\105" +
    "\062\216\066\231\106\226\107\122\113\172\114\131\122" +
    "\133\131\050\157\044\167\052\175\167\176\043\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\134\031\124\032\150\033\154\034\155\041\113" +
    "\042\207\047\130\050\201\055\105\062\216\066\u01e9\075" +
    "\u01e5\101\160\106\226\107\122\113\172\114\131\116\223" +
    "\120\212\121\157\122\133\127\156\130\220\131\050\132" +
    "\140\141\117\142\161\145\u01e6\151\u01ec\153\254\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\002\001\uff70\000\124\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\047\130\050\201" +
    "\055\105\062\216\066\231\101\160\106\226\107\122\113" +
    "\172\114\131\116\223\120\212\121\157\122\133\127\156" +
    "\130\220\131\050\132\140\141\117\142\161\157\205\160" +
    "\204\167\052\173\166\174\213\175\167\176\043\177\203" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\002\000\004\152\u01e1\001\ufe96\000\002\001\ufe98" +
    "\000\006\070\u01df\115\321\001\ufe92\000\002\001\ufe94\000" +
    "\124\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\047\130\050\201\055\105\062\216\066\231\101\160\106" +
    "\226\107\122\113\172\114\131\116\223\120\212\121\157" +
    "\122\133\127\156\130\220\131\050\132\140\141\117\142" +
    "\161\157\205\160\204\167\052\173\166\174\213\175\167" +
    "\176\043\177\203\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\070\031\124\032\150" +
    "\033\154\050\201\055\105\062\216\101\160\107\122\114" +
    "\131\116\223\120\212\122\133\127\156\131\050\141\117" +
    "\157\044\167\052\173\166\175\167\176\043\177\203\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\002" +
    "\000\002\001\ufe6d\000\002\001\ufe74\000\010\161\u011b\162" +
    "\u011a\163\u011c\001\ufeec\000\002\001\uff00\000\032\073\u01c1" +
    "\104\u01bf\105\u01ba\112\u01b9\123\u01c2\124\u01bb\133\u01b8\134" +
    "\u01bd\135\u01bc\136\u01b7\137\u01c0\140\u01be\001\uff15\000\002" +
    "\001\uff18\000\002\001\ufe70\000\004\144\u01b3\001\uff44\000" +
    "\002\001\uff45\000\002\001\ufe75\000\002\001\ufe6f\000\004" +
    "\115\u01b0\001\002\000\020\066\066\075\070\145\067\151" +
    "\077\157\056\201\051\207\046\001\002\000\066\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\055\105\062" +
    "\216\066\231\106\226\107\122\113\172\114\131\122\133" +
    "\131\050\157\044\167\052\175\167\176\043\200\125\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\002" +
    "\000\124\031\124\032\150\033\154\034\155\041\113\042" +
    "\207\047\130\050\201\055\105\062\216\066\231\101\160" +
    "\106\226\107\122\113\172\114\131\116\223\120\212\121" +
    "\157\122\133\127\156\130\220\131\050\132\140\141\117" +
    "\142\161\157\205\160\204\167\052\173\166\174\213\175" +
    "\167\176\043\177\203\200\125\201\176\202\141\203\047" +
    "\207\046\210\153\211\143\001\002\000\066\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\055\105\062\216" +
    "\066\231\106\226\107\122\113\172\114\131\122\133\131" +
    "\050\157\044\167\052\175\167\176\043\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\004\110\u0162\001\uff30\000\002\001\uff32\000\002\001\ufeae" +
    "\000\002\001\ufeb0\000\020\066\066\075\070\145\067\151" +
    "\077\157\056\201\051\207\046\001\002\000\070\031\124" +
    "\032\150\033\154\050\201\055\105\062\216\101\160\107" +
    "\122\114\131\116\223\120\212\122\133\127\156\131\050" +
    "\141\117\157\044\167\052\173\166\175\167\176\043\177" +
    "\203\201\176\202\141\203\047\207\046\210\153\211\143" +
    "\001\002\000\002\001\ufe87\000\002\001\ufe89\000\110\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\050\201" +
    "\055\105\062\216\066\231\101\160\106\226\107\122\113" +
    "\172\114\131\115\335\116\223\120\212\122\133\127\156" +
    "\131\050\141\117\157\044\167\052\173\166\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\002\001\ufe7b\000\126\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\115\233\116\223\120\212\121\157" +
    "\122\133\127\156\130\220\131\050\132\140\141\117\142" +
    "\161\157\205\160\204\167\052\173\166\174\213\175\167" +
    "\176\043\177\203\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\010\026\u014e\027\u014f" +
    "\030\u0150\001\ufed7\000\004\172\u014c\001\ufe72\000\002\001" +
    "\ufee3\000\004\051\u014a\001\ufeb2\000\020\066\066\075\070" +
    "\145\067\151\077\157\056\201\051\207\046\001\002\000" +
    "\002\001\ufeb4\000\020\066\066\075\070\145\067\151\077" +
    "\157\056\201\051\207\046\001\002\000\066\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\055\105\062\216" +
    "\066\231\106\226\107\122\113\172\114\131\122\133\131" +
    "\050\157\044\167\052\175\167\176\043\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\070\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\055\105\062\216\066\231\106\226\107\122\113\172\114" +
    "\131\122\133\131\050\157\044\167\052\172\u0139\175\167" +
    "\176\043\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\002\000\002\001\uff91\000\106\031\124" +
    "\032\150\033\154\034\155\041\305\042\312\050\201\055" +
    "\105\062\304\066\231\101\160\106\276\107\122\113\277" +
    "\114\131\116\223\120\212\122\133\127\156\131\050\141" +
    "\117\157\044\167\052\173\166\175\301\176\043\177\203" +
    "\200\310\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\002\001\ufe8f\000\002\001\ufe90\000\020" +
    "\066\066\075\070\145\067\151\077\157\056\201\051\207" +
    "\046\001\002\000\066\031\124\032\150\033\154\034\155" +
    "\041\113\042\207\055\105\062\216\066\231\106\226\107" +
    "\122\113\172\114\131\122\133\131\050\157\044\167\052" +
    "\175\167\176\043\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\002\001\uff22\000\002" +
    "\001\uff2a\000\070\031\124\032\150\033\154\050\201\055" +
    "\105\062\216\101\160\107\122\114\131\116\223\120\212" +
    "\122\133\127\156\131\050\141\117\157\044\167\052\173" +
    "\166\175\167\176\043\177\203\201\176\202\141\203\047" +
    "\207\046\210\153\211\143\001\002\000\002\001\ufe6b\000" +
    "\066\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\055\105\062\216\066\231\106\226\107\122\113\172\114" +
    "\131\122\133\131\050\157\044\167\052\175\167\176\043" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\002\000\030\024\264\025\265\035\273\036\266" +
    "\037\271\040\272\043\270\044\263\045\274\125\262\146" +
    "\267\001\ufee7\000\002\001\ufeeb\000\010\157\056\201\051" +
    "\207\046\001\002\000\002\001\uff21\000\002\001\uff29\000" +
    "\106\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\116\223\120\212\122\133\127\156" +
    "\131\050\141\117\157\044\167\052\173\166\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\002\001\ufeb7\000\002\001" +
    "\ufebd\000\004\115\233\001\002\000\002\001\ufec0\000\124" +
    "\031\124\032\150\033\154\034\155\041\113\042\207\047" +
    "\130\050\201\055\105\062\216\066\231\101\160\106\226" +
    "\107\122\113\172\114\131\116\223\120\212\121\157\122" +
    "\133\127\156\130\220\131\050\132\140\141\117\142\161" +
    "\157\205\160\204\167\052\173\166\174\213\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\uff49\000\002\001\uff47\000\004\154" +
    "\241\001\002\000\004\065\237\001\uff48\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\002\001\uff46\000\002\001\ufe8d\000" +
    "\004\073\244\001\002\000\002\001\uff42\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\010\056\251\065\246\114\250\001" +
    "\002\000\010\157\056\201\051\207\046\001\002\000\002" +
    "\001\uff53\000\126\031\124\032\150\033\154\034\155\041" +
    "\113\042\207\047\130\050\201\055\105\062\216\066\231" +
    "\101\160\106\226\107\122\113\172\114\131\116\223\120" +
    "\212\121\157\122\133\127\156\130\220\131\050\132\140" +
    "\141\117\142\161\153\254\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\124\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\047\130\050\201\055\105\062\216\066\231\101\160\106" +
    "\226\107\122\113\172\114\131\116\223\120\212\121\157" +
    "\122\133\127\156\130\220\131\050\132\140\141\117\142" +
    "\161\157\205\160\204\167\052\173\166\174\213\175\167" +
    "\176\043\177\203\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\002\001\uff4a\000\002" +
    "\001\uff4b\000\002\001\uff4e\000\002\001\uff4d\000\126\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\116\223\120\212\121\157\122\133" +
    "\127\156\130\220\131\050\132\140\141\117\142\161\153" +
    "\257\157\205\160\204\167\052\173\166\174\213\175\167" +
    "\176\043\177\203\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\002\001\uff4f\000\002" +
    "\001\uff4c\000\002\001\uff52\000\106\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\050\201\055\105\062\304" +
    "\066\231\101\160\106\276\107\122\113\277\114\131\116" +
    "\223\120\212\122\133\127\156\131\050\141\117\157\044" +
    "\167\052\173\166\175\301\176\043\177\203\200\310\201" +
    "\176\202\300\203\047\207\046\210\153\211\143\001\002" +
    "\000\106\031\124\032\150\033\154\034\155\041\305\042" +
    "\312\050\201\055\105\062\304\066\231\101\160\106\276" +
    "\107\122\113\277\114\131\116\223\120\212\122\133\127" +
    "\156\131\050\141\117\157\044\167\052\173\166\175\301" +
    "\176\043\177\203\200\310\201\176\202\300\203\047\207" +
    "\046\210\153\211\143\001\002\000\106\031\124\032\150" +
    "\033\154\034\155\041\305\042\312\050\201\055\105\062" +
    "\304\066\231\101\160\106\276\107\122\113\277\114\131" +
    "\116\223\120\212\122\133\127\156\131\050\141\117\157" +
    "\044\167\052\173\166\175\301\176\043\177\203\200\310" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\106\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\050\201\055\105\062\304\066\231\101\160\106" +
    "\276\107\122\113\277\114\131\116\223\120\212\122\133" +
    "\127\156\131\050\141\117\157\044\167\052\173\166\175" +
    "\301\176\043\177\203\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\106\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\050\201\055\105" +
    "\062\304\066\231\101\160\106\276\107\122\113\277\114" +
    "\131\116\223\120\212\122\133\127\156\131\050\141\117" +
    "\157\044\167\052\173\166\175\301\176\043\177\203\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\106\031\124\032\150\033\154\034\155\041" +
    "\305\042\312\050\201\055\105\062\304\066\231\101\160" +
    "\106\276\107\122\113\277\114\131\116\223\120\212\122" +
    "\133\127\156\131\050\141\117\157\044\167\052\173\166" +
    "\175\301\176\043\177\203\200\310\201\176\202\300\203" +
    "\047\207\046\210\153\211\143\001\002\000\106\031\124" +
    "\032\150\033\154\034\155\041\305\042\312\050\201\055" +
    "\105\062\304\066\231\101\160\106\276\107\122\113\277" +
    "\114\131\116\223\120\212\122\133\127\156\131\050\141" +
    "\117\157\044\167\052\173\166\175\301\176\043\177\203" +
    "\200\310\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\106\031\124\032\150\033\154\034\155" +
    "\041\305\042\312\050\201\055\105\062\304\066\231\101" +
    "\160\106\276\107\122\113\277\114\131\116\223\120\212" +
    "\122\133\127\156\131\050\141\117\157\044\167\052\173" +
    "\166\175\301\176\043\177\203\200\310\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\106\031" +
    "\124\032\150\033\154\034\155\041\305\042\312\050\201" +
    "\055\105\062\304\066\231\101\160\106\276\107\122\113" +
    "\277\114\131\116\223\120\212\122\133\127\156\131\050" +
    "\141\117\157\044\167\052\173\166\175\301\176\043\177" +
    "\203\200\310\201\176\202\300\203\047\207\046\210\153" +
    "\211\143\001\002\000\106\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\050\201\055\105\062\304\066\231" +
    "\101\160\106\276\107\122\113\277\114\131\116\223\120" +
    "\212\122\133\127\156\131\050\141\117\157\044\167\052" +
    "\173\166\175\301\176\043\177\203\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\106" +
    "\031\124\032\150\033\154\034\155\041\305\042\312\050" +
    "\201\055\105\062\304\066\231\101\160\106\276\107\122" +
    "\113\277\114\131\116\223\120\212\122\133\127\156\131" +
    "\050\141\117\157\044\167\052\173\166\175\301\176\043" +
    "\177\203\200\310\201\176\202\300\203\047\207\046\210" +
    "\153\211\143\001\002\000\004\051\353\001\ufeb2\000\066" +
    "\031\124\032\150\033\154\034\155\041\305\042\312\055" +
    "\105\062\304\066\231\106\276\107\122\113\277\114\131" +
    "\122\133\131\050\157\044\167\052\175\301\176\043\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\070\031\124\032\150\033\154\034\155\041" +
    "\305\042\312\055\105\062\304\066\231\106\276\107\122" +
    "\113\277\114\131\115\335\122\133\131\050\157\044\167" +
    "\052\175\301\176\043\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\050\031\124\032" +
    "\150\033\154\055\105\062\304\107\122\114\131\122\133" +
    "\131\050\157\044\167\052\175\301\176\043\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\050" +
    "\031\124\032\150\033\154\055\105\062\304\107\122\114" +
    "\131\122\133\131\050\157\044\167\052\175\301\176\043" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\044\004\371\005\356\006\372\007\364\010\365" +
    "\011\374\012\367\013\361\014\375\015\363\016\360\017" +
    "\366\020\357\021\370\022\362\023\376\067\355\001\ufe9a" +
    "\000\004\147\351\001\ufeba\000\050\031\124\032\150\033" +
    "\154\055\105\062\304\107\122\114\131\122\133\131\050" +
    "\157\044\167\052\175\301\176\043\201\176\202\300\203" +
    "\047\207\046\210\153\211\143\001\002\000\066\031\124" +
    "\032\150\033\154\034\155\041\305\042\312\055\105\062" +
    "\304\066\231\106\276\107\122\113\277\114\131\122\133" +
    "\131\050\157\044\167\052\175\301\176\043\200\310\201" +
    "\176\202\300\203\047\207\046\210\153\211\143\001\002" +
    "\000\010\026\341\027\342\030\343\001\ufecc\000\006\070" +
    "\322\115\321\001\ufe92\000\070\031\124\032\150\033\154" +
    "\034\155\041\305\042\312\055\105\062\304\066\231\106" +
    "\276\107\122\113\277\114\131\115\332\122\133\131\050" +
    "\157\044\167\052\175\301\176\043\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\004" +
    "\152\315\001\ufe96\000\066\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\055\105\062\304\066\231\106\276" +
    "\107\122\113\277\114\131\122\133\131\050\157\044\167" +
    "\052\175\301\176\043\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\002\001\ufed8\000" +
    "\002\001\ufeb8\000\060\031\124\032\150\033\154\034\155" +
    "\055\105\062\304\066\231\107\122\113\316\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\317" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\004\115\335\001\002\000\004\115\332\001\002" +
    "\000\006\070\322\115\321\001\ufe91\000\124\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\047\130\050\201" +
    "\055\105\062\216\066\231\101\160\106\226\107\122\113" +
    "\172\114\131\116\223\120\212\121\157\122\133\127\156" +
    "\130\220\131\050\132\140\141\117\142\161\157\205\160" +
    "\204\167\052\173\166\174\213\175\167\176\043\177\203" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\uff49\000\060\031\124\032\150\033\154\034\323" +
    "\055\105\062\304\066\325\107\122\113\324\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\326" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\002\001\ufe84\000\002\001\ufe83\000\002\001\ufe85" +
    "\000\002\001\ufe82\000\002\001\ufe86\000\004\154\331\001" +
    "\002\000\002\001\ufe8e\000\124\031\124\032\150\033\154" +
    "\034\155\041\113\042\207\047\130\050\201\055\105\062" +
    "\216\066\231\101\160\106\226\107\122\113\172\114\131" +
    "\116\223\120\212\121\157\122\133\127\156\130\220\131" +
    "\050\132\140\141\117\142\161\157\205\160\204\167\052" +
    "\173\166\174\213\175\167\176\043\177\203\200\125\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\uff49" +
    "\000\004\154\334\001\002\000\002\001\ufe8a\000\124\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\116\223\120\212\121\157\122\133" +
    "\127\156\130\220\131\050\132\140\141\117\142\161\157" +
    "\205\160\204\167\052\173\166\174\213\175\167\176\043" +
    "\177\203\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\uff49\000\004\154\337\001\002\000\002" +
    "\001\ufe8b\000\002\001\ufeb6\000\066\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\055\105\062\304\066\231" +
    "\106\276\107\122\113\277\114\131\122\133\131\050\157" +
    "\044\167\052\175\301\176\043\200\310\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\066\031" +
    "\124\032\150\033\154\034\155\041\305\042\312\055\105" +
    "\062\304\066\231\106\276\107\122\113\277\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\310" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\066\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\055\105\062\304\066\231\106\276\107\122\113" +
    "\277\114\131\122\133\131\050\157\044\167\052\175\301" +
    "\176\043\200\310\201\176\202\300\203\047\207\046\210" +
    "\153\211\143\001\002\000\002\001\ufec4\000\002\001\ufec5" +
    "\000\002\001\ufec6\000\002\001\ufeb9\000\002\001\ufe78\000" +
    "\060\031\124\032\150\033\154\034\155\055\105\062\304" +
    "\066\231\107\122\113\316\114\131\122\133\131\050\157" +
    "\044\167\052\175\301\176\043\200\317\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\004\051" +
    "\353\001\ufeb1\000\060\031\124\032\150\033\154\034\155" +
    "\055\105\062\304\066\231\107\122\113\316\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\317" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\002\001\ufead\000\060\031\124\032\150\033\154" +
    "\034\155\055\105\062\304\066\231\107\122\113\316\114" +
    "\131\122\133\131\050\157\044\167\052\175\301\176\043" +
    "\200\317\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\002\001\ufeab\000\002\001\ufea0\000\002" +
    "\001\ufea2\000\002\001\ufea5\000\002\001\ufe9e\000\002\001" +
    "\ufea3\000\002\001\ufea9\000\002\001\ufea8\000\002\001\ufea1" +
    "\000\002\001\ufea6\000\002\001\ufe9f\000\002\001\ufeac\000" +
    "\002\001\ufeaa\000\060\031\124\032\150\033\154\034\155" +
    "\055\105\062\304\066\231\107\122\113\316\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\317" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\002\001\ufea7\000\002\001\ufea4\000\002\001\ufe9d" +
    "\000\002\001\ufe99\000\004\152\315\001\ufe95\000\002\001" +
    "\ufe79\000\002\001\ufe7a\000\002\001\ufeb5\000\010\026\341" +
    "\027\342\030\343\001\ufed2\000\002\001\ufedc\000\010\026" +
    "\341\027\342\030\343\001\ufecf\000\002\001\ufedb\000\010" +
    "\026\341\027\342\030\343\001\ufed1\000\002\001\ufede\000" +
    "\010\026\341\027\342\030\343\001\ufece\000\002\001\ufeda" +
    "\000\010\026\341\027\342\030\343\001\ufed6\000\002\001" +
    "\ufee2\000\010\026\341\027\342\030\343\001\ufed0\000\002" +
    "\001\ufedd\000\010\026\341\027\342\030\343\001\ufed3\000" +
    "\002\001\ufedf\000\010\026\341\027\342\030\343\001\ufed4" +
    "\000\002\001\ufee0\000\010\026\341\027\342\030\343\001" +
    "\ufecd\000\002\001\ufed9\000\010\026\341\027\342\030\343" +
    "\001\ufed5\000\002\001\ufee1\000\010\161\u011b\162\u011a\163" +
    "\u011c\001\ufef2\000\002\001\uff06\000\106\031\124\032\150" +
    "\033\154\034\155\041\305\042\312\050\201\055\105\062" +
    "\304\066\231\101\160\106\276\107\122\113\277\114\131" +
    "\116\223\120\212\122\133\127\156\131\050\141\117\157" +
    "\044\167\052\173\166\175\301\176\043\177\203\200\310" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\106\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\050\201\055\105\062\304\066\231\101\160\106" +
    "\276\107\122\113\277\114\131\116\223\120\212\122\133" +
    "\127\156\131\050\141\117\157\044\167\052\173\166\175" +
    "\301\176\043\177\203\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\106\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\050\201\055\105" +
    "\062\304\066\231\101\160\106\276\107\122\113\277\114" +
    "\131\116\223\120\212\122\133\127\156\131\050\141\117" +
    "\157\044\167\052\173\166\175\301\176\043\177\203\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\010\026\341\027\342\030\343\001\ufed7\000" +
    "\030\024\u0122\025\u0123\035\u0129\036\u0124\037\u0127\040\u0128" +
    "\043\u0126\044\u0121\045\u012a\125\u0120\146\u0125\001\ufee4\000" +
    "\002\001\ufee8\000\066\031\124\032\150\033\154\034\155" +
    "\041\305\042\312\055\105\062\304\066\231\106\276\107" +
    "\122\113\277\114\131\122\133\131\050\157\044\167\052" +
    "\175\301\176\043\200\310\201\176\202\300\203\047\207" +
    "\046\210\153\211\143\001\002\000\066\031\124\032\150" +
    "\033\154\034\155\041\305\042\312\055\105\062\304\066" +
    "\231\106\276\107\122\113\277\114\131\122\133\131\050" +
    "\157\044\167\052\175\301\176\043\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\066" +
    "\031\124\032\150\033\154\034\155\041\305\042\312\055" +
    "\105\062\304\066\231\106\276\107\122\113\277\114\131" +
    "\122\133\131\050\157\044\167\052\175\301\176\043\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\066\031\124\032\150\033\154\034\155\041" +
    "\305\042\312\055\105\062\304\066\231\106\276\107\122" +
    "\113\277\114\131\122\133\131\050\157\044\167\052\175" +
    "\301\176\043\200\310\201\176\202\300\203\047\207\046" +
    "\210\153\211\143\001\002\000\066\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\055\105\062\304\066\231" +
    "\106\276\107\122\113\277\114\131\122\133\131\050\157" +
    "\044\167\052\175\301\176\043\200\310\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\066\031" +
    "\124\032\150\033\154\034\155\041\305\042\312\055\105" +
    "\062\304\066\231\106\276\107\122\113\277\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\310" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\066\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\055\105\062\304\066\231\106\276\107\122\113" +
    "\277\114\131\122\133\131\050\157\044\167\052\175\301" +
    "\176\043\200\310\201\176\202\300\203\047\207\046\210" +
    "\153\211\143\001\002\000\066\031\124\032\150\033\154" +
    "\034\155\041\305\042\312\055\105\062\304\066\231\106" +
    "\276\107\122\113\277\114\131\122\133\131\050\157\044" +
    "\167\052\175\301\176\043\200\310\201\176\202\300\203" +
    "\047\207\046\210\153\211\143\001\002\000\066\031\124" +
    "\032\150\033\154\034\155\041\305\042\312\055\105\062" +
    "\304\066\231\106\276\107\122\113\277\114\131\122\133" +
    "\131\050\157\044\167\052\175\301\176\043\200\310\201" +
    "\176\202\300\203\047\207\046\210\153\211\143\001\002" +
    "\000\066\031\124\032\150\033\154\034\155\041\305\042" +
    "\312\055\105\062\304\066\231\106\276\107\122\113\277" +
    "\114\131\122\133\131\050\157\044\167\052\175\301\176" +
    "\043\200\310\201\176\202\300\203\047\207\046\210\153" +
    "\211\143\001\002\000\066\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\055\105\062\304\066\231\106\276" +
    "\107\122\113\277\114\131\122\133\131\050\157\044\167" +
    "\052\175\301\176\043\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\030\024\u0122\025" +
    "\u0123\035\u0129\036\u0124\037\u0127\040\u0128\043\u0126\044\u0121" +
    "\045\u012a\125\u0120\146\u0125\001\ufee6\000\002\001\ufeea\000" +
    "\030\024\u0122\025\u0123\035\u0129\036\u0124\037\u0127\040\u0128" +
    "\043\u0126\044\u0121\045\u012a\125\u0120\146\u0125\001\ufee5\000" +
    "\002\001\ufee9\000\002\001\ufe7c\000\002\001\ufe7f\000\010" +
    "\161\u011b\162\u011a\163\u011c\001\ufef1\000\002\001\uff05\000" +
    "\002\001\uff58\000\010\056\251\065\u0135\114\250\001\002" +
    "\000\020\066\066\075\070\145\067\151\077\157\056\201" +
    "\051\207\046\001\002\000\002\001\uff3e\000\002\001\uff59" +
    "\000\002\001\ufec1\000\006\167\u013c\207\046\001\002\000" +
    "\010\161\u011b\162\u011a\163\u011c\001\ufeed\000\002\001\uff01" +
    "\000\002\001\uff8c\000\010\161\u011b\162\u011a\163\u011c\001" +
    "\ufeee\000\002\001\uff02\000\010\056\251\065\u0135\114\250" +
    "\001\002\000\002\001\uff36\000\012\056\u0143\065\u0135\114" +
    "\250\205\u0144\001\002\000\002\001\uff41\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\124\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\047\130\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\116" +
    "\223\120\212\121\157\122\133\127\156\130\220\131\050" +
    "\132\140\141\117\142\161\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\006\056\251\114\250\001\002\000\002\001\uff39\000\004" +
    "\056\u0148\001\uff4b\000\124\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\047\130\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\116" +
    "\223\120\212\121\157\122\133\127\156\130\220\131\050" +
    "\132\140\141\117\142\161\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\002\001\uff3c\000\100\031\124\032\150\033\154\034\155" +
    "\050\201\055\105\062\304\066\231\101\160\107\122\113" +
    "\316\114\131\116\223\120\212\122\133\127\156\131\050" +
    "\141\117\157\044\167\052\173\166\175\301\176\043\177" +
    "\203\200\317\201\176\202\300\203\047\207\046\210\153" +
    "\211\143\001\002\000\002\001\ufeaf\000\004\207\046\001" +
    "\002\000\004\172\061\001\uff7f\000\106\031\124\032\150" +
    "\033\154\034\155\041\305\042\312\050\201\055\105\062" +
    "\304\066\231\101\160\106\276\107\122\113\277\114\131" +
    "\116\223\120\212\122\133\127\156\131\050\141\117\157" +
    "\044\167\052\173\166\175\301\176\043\177\203\200\310" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\106\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\050\201\055\105\062\304\066\231\101\160\106" +
    "\276\107\122\113\277\114\131\116\223\120\212\122\133" +
    "\127\156\131\050\141\117\157\044\167\052\173\166\175" +
    "\301\176\043\177\203\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\106\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\050\201\055\105" +
    "\062\304\066\231\101\160\106\276\107\122\113\277\114" +
    "\131\116\223\120\212\122\133\127\156\131\050\141\117" +
    "\157\044\167\052\173\166\175\301\176\043\177\203\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\002\001\ufec8\000\002\001\ufec9\000\002\001" +
    "\ufeca\000\002\001\uff6a\000\002\001\ufebb\000\002\001\ufebe" +
    "\000\002\001\ufe7d\000\002\001\ufe80\000\012\056\u015b\065" +
    "\u0135\114\250\205\u015c\001\002\000\002\001\uff3f\000\124" +
    "\031\124\032\150\033\154\034\155\041\113\042\207\047" +
    "\130\050\201\055\105\062\216\066\231\101\160\106\226" +
    "\107\122\113\172\114\131\116\223\120\212\121\157\122" +
    "\133\127\156\130\220\131\050\132\140\141\117\142\161" +
    "\157\205\160\204\167\052\173\166\174\213\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\124\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\047\130\050\201\055\105" +
    "\062\216\066\231\101\160\106\226\107\122\113\172\114" +
    "\131\116\223\120\212\121\157\122\133\127\156\130\220" +
    "\131\050\132\140\141\117\142\161\157\205\160\204\167" +
    "\052\173\166\174\213\175\167\176\043\177\203\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\006\056\251\114\250\001\002\000\002\001\uff37" +
    "\000\004\056\u0160\001\uff4b\000\124\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\047\130\050\201\055\105" +
    "\062\216\066\231\101\160\106\226\107\122\113\172\114" +
    "\131\116\223\120\212\121\157\122\133\127\156\130\220" +
    "\131\050\132\140\141\117\142\161\157\205\160\204\167" +
    "\052\173\166\174\213\175\167\176\043\177\203\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\002\001\uff3a\000\124\031\124\032\150\033\154" +
    "\034\155\041\305\042\312\047\u016d\050\201\055\105\062" +
    "\304\066\231\101\160\106\276\107\122\113\277\114\131" +
    "\116\223\120\212\121\u016e\122\133\127\156\130\u016c\131" +
    "\050\132\u0165\141\117\142\u016b\157\u0163\160\u016f\167\052" +
    "\173\166\174\u0164\175\301\176\043\177\203\200\310\201" +
    "\176\202\300\203\047\207\046\210\153\211\143\001\002" +
    "\000\070\031\124\032\150\033\154\034\155\041\305\042" +
    "\312\055\105\062\304\066\231\106\276\107\122\113\277" +
    "\114\131\122\133\131\050\157\044\167\052\172\u0139\175" +
    "\301\176\043\200\310\201\176\202\300\203\047\207\046" +
    "\210\153\211\143\001\002\000\066\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\055\105\062\304\066\231" +
    "\106\276\107\122\113\277\114\131\122\133\131\050\157" +
    "\044\167\052\175\301\176\043\200\310\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\104\031" +
    "\124\032\150\033\154\034\155\041\305\042\312\047\u016d" +
    "\055\105\062\304\066\231\106\276\107\122\113\277\114" +
    "\131\121\u016e\122\133\130\u016c\131\050\132\u0165\142\u016b" +
    "\157\u0163\160\u016f\167\052\174\u0164\175\301\176\043\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\010\161\u0173\162\u0172\163\u0174\001\ufeec\000" +
    "\032\073\u018b\104\u0189\105\u0184\112\u0183\123\u018c\124\u0185" +
    "\133\u0182\134\u0188\135\u0186\136\u0181\137\u018a\140\u0187\001" +
    "\uff15\000\006\052\u017a\111\u0179\001\uff20\000\002\001\uff2b" +
    "\000\030\024\u0122\025\u0123\035\u0129\036\u0124\037\u0127\040" +
    "\u0128\043\u0126\044\u0121\045\u012a\125\u0120\146\u0125\001\ufee7" +
    "\000\066\031\124\032\150\033\154\034\155\041\305\042" +
    "\312\055\105\062\304\066\231\106\276\107\122\113\277" +
    "\114\131\122\133\131\050\157\044\167\052\175\301\176" +
    "\043\200\310\201\176\202\300\203\047\207\046\210\153" +
    "\211\143\001\002\000\066\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\055\105\062\304\066\231\106\276" +
    "\107\122\113\277\114\131\122\133\131\050\157\044\167" +
    "\052\175\301\176\043\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\066\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\055\105\062\304" +
    "\066\231\106\276\107\122\113\277\114\131\122\133\131" +
    "\050\157\044\167\052\175\301\176\043\200\310\201\176" +
    "\202\300\203\047\207\046\210\153\211\143\001\002\000" +
    "\066\031\124\032\150\033\154\034\155\041\305\042\312" +
    "\055\105\062\304\066\231\106\276\107\122\113\277\114" +
    "\131\122\133\131\050\157\044\167\052\175\301\176\043" +
    "\200\310\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\066\031\124\032\150\033\154\034\155" +
    "\041\305\042\312\055\105\062\304\066\231\106\276\107" +
    "\122\113\277\114\131\122\133\131\050\157\044\167\052" +
    "\175\301\176\043\200\310\201\176\202\300\203\047\207" +
    "\046\210\153\211\143\001\002\000\002\001\uff2d\000\010" +
    "\161\u0173\162\u0172\163\u0174\001\ufeee\000\066\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\055\105\062\304" +
    "\066\231\106\276\107\122\113\277\114\131\122\133\131" +
    "\050\157\044\167\052\175\301\176\043\200\310\201\176" +
    "\202\300\203\047\207\046\210\153\211\143\001\002\000" +
    "\066\031\124\032\150\033\154\034\155\041\305\042\312" +
    "\055\105\062\304\066\231\106\276\107\122\113\277\114" +
    "\131\122\133\131\050\157\044\167\052\175\301\176\043" +
    "\200\310\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\066\031\124\032\150\033\154\034\155" +
    "\041\305\042\312\055\105\062\304\066\231\106\276\107" +
    "\122\113\277\114\131\122\133\131\050\157\044\167\052" +
    "\175\301\176\043\200\310\201\176\202\300\203\047\207" +
    "\046\210\153\211\143\001\002\000\010\161\u0173\162\u0172" +
    "\163\u0174\001\ufef0\000\010\161\u0173\162\u0172\163\u0174\001" +
    "\ufef3\000\010\161\u0173\162\u0172\163\u0174\001\ufef2\000\010" +
    "\161\u0173\162\u0172\163\u0174\001\ufeef\000\104\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\047\u016d\055\105" +
    "\062\304\066\231\106\276\107\122\113\277\114\131\121" +
    "\u016e\122\133\130\u016c\131\050\132\u0165\142\u016b\157\u0163" +
    "\160\u016f\167\052\174\u0164\175\301\176\043\200\310\201" +
    "\176\202\300\203\047\207\046\210\153\211\143\001\002" +
    "\000\104\031\124\032\150\033\154\034\155\041\305\042" +
    "\312\047\u016d\055\105\062\304\066\231\106\276\107\122" +
    "\113\277\114\131\121\u016e\122\133\130\u016c\131\050\132" +
    "\u0165\142\u016b\157\u0163\160\u016f\167\052\174\u0164\175\301" +
    "\176\043\200\310\201\176\202\300\203\047\207\046\210" +
    "\153\211\143\001\002\000\002\001\uff19\000\002\001\uff1d" +
    "\000\004\071\u017e\001\uff22\000\104\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\047\u016d\055\105\062\304" +
    "\066\231\106\276\107\122\113\277\114\131\121\u016e\122" +
    "\133\130\u016c\131\050\132\u0165\142\u016b\157\u0163\160\u016f" +
    "\167\052\174\u0164\175\301\176\043\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\002" +
    "\001\uff1e\000\002\001\uff1f\000\066\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\055\105\062\304\066\231" +
    "\106\276\107\122\113\277\114\131\122\133\131\050\157" +
    "\044\167\052\175\301\176\043\200\310\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\066\031" +
    "\124\032\150\033\154\034\155\041\305\042\312\055\105" +
    "\062\304\066\231\106\276\107\122\113\277\114\131\122" +
    "\133\131\050\157\044\167\052\175\301\176\043\200\310" +
    "\201\176\202\300\203\047\207\046\210\153\211\143\001" +
    "\002\000\066\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\055\105\062\304\066\231\106\276\107\122\113" +
    "\277\114\131\122\133\131\050\157\044\167\052\175\301" +
    "\176\043\200\310\201\176\202\300\203\047\207\046\210" +
    "\153\211\143\001\002\000\066\031\124\032\150\033\154" +
    "\034\155\041\305\042\312\055\105\062\304\066\231\106" +
    "\276\107\122\113\277\114\131\122\133\131\050\157\044" +
    "\167\052\175\301\176\043\200\310\201\176\202\300\203" +
    "\047\207\046\210\153\211\143\001\002\000\066\031\124" +
    "\032\150\033\154\034\155\041\305\042\312\055\105\062" +
    "\304\066\231\106\276\107\122\113\277\114\131\122\133" +
    "\131\050\157\044\167\052\175\301\176\043\200\310\201" +
    "\176\202\300\203\047\207\046\210\153\211\143\001\002" +
    "\000\066\031\124\032\150\033\154\034\155\041\305\042" +
    "\312\055\105\062\304\066\231\106\276\107\122\113\277" +
    "\114\131\122\133\131\050\157\044\167\052\175\301\176" +
    "\043\200\310\201\176\202\300\203\047\207\046\210\153" +
    "\211\143\001\002\000\066\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\055\105\062\304\066\231\106\276" +
    "\107\122\113\277\114\131\122\133\131\050\157\044\167" +
    "\052\175\301\176\043\200\310\201\176\202\300\203\047" +
    "\207\046\210\153\211\143\001\002\000\066\031\124\032" +
    "\150\033\154\034\155\041\305\042\312\055\105\062\304" +
    "\066\231\106\276\107\122\113\277\114\131\122\133\131" +
    "\050\157\044\167\052\175\301\176\043\200\310\201\176" +
    "\202\300\203\047\207\046\210\153\211\143\001\002\000" +
    "\066\031\124\032\150\033\154\034\155\041\305\042\312" +
    "\055\105\062\304\066\231\106\276\107\122\113\277\114" +
    "\131\122\133\131\050\157\044\167\052\175\301\176\043" +
    "\200\310\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\066\031\124\032\150\033\154\034\155" +
    "\041\305\042\312\055\105\062\304\066\231\106\276\107" +
    "\122\113\277\114\131\122\133\131\050\157\044\167\052" +
    "\175\301\176\043\200\310\201\176\202\300\203\047\207" +
    "\046\210\153\211\143\001\002\000\066\031\124\032\150" +
    "\033\154\034\155\041\305\042\312\055\105\062\304\066" +
    "\231\106\276\107\122\113\277\114\131\122\133\131\050" +
    "\157\044\167\052\175\301\176\043\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\066" +
    "\031\124\032\150\033\154\034\155\041\305\042\312\055" +
    "\105\062\304\066\231\106\276\107\122\113\277\114\131" +
    "\122\133\131\050\157\044\167\052\175\301\176\043\200" +
    "\310\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\010\161\u0173\162\u0172\163\u0174\001\ufefd\000" +
    "\010\161\u0173\162\u0172\163\u0174\001\ufefe\000\010\161\u0173" +
    "\162\u0172\163\u0174\001\ufef7\000\010\161\u0173\162\u0172\163" +
    "\u0174\001\ufefc\000\010\161\u0173\162\u0172\163\u0174\001\ufef6" +
    "\000\010\161\u0173\162\u0172\163\u0174\001\ufef5\000\010\161" +
    "\u0173\162\u0172\163\u0174\001\ufef4\000\010\161\u0173\162\u0172" +
    "\163\u0174\001\ufefb\000\010\161\u0173\162\u0172\163\u0174\001" +
    "\ufefa\000\010\161\u0173\162\u0172\163\u0174\001\ufeff\000\010" +
    "\161\u0173\162\u0172\163\u0174\001\ufef8\000\010\161\u0173\162" +
    "\u0172\163\u0174\001\ufef9\000\002\001\uff14\000\010\161\u0173" +
    "\162\u0172\163\u0174\001\ufef1\000\010\161\u0173\162\u0172\163" +
    "\u0174\001\ufeed\000\010\161\u011b\162\u011a\163\u011c\001\ufeef" +
    "\000\002\001\uff03\000\010\056\u019f\204\u01a1\206\u01a0\001" +
    "\002\000\124\031\124\032\150\033\154\034\155\041\113" +
    "\042\207\047\130\050\201\055\105\062\216\066\231\101" +
    "\160\106\226\107\122\113\172\114\131\116\223\120\212" +
    "\121\157\122\133\127\156\130\220\131\050\132\140\141" +
    "\117\142\161\157\205\160\204\167\052\173\166\174\213" +
    "\175\167\176\043\177\203\200\125\201\176\202\141\203" +
    "\047\207\046\210\153\211\143\001\002\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\124\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\047\130\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\116" +
    "\223\120\212\121\157\122\133\127\156\130\220\131\050" +
    "\132\140\141\117\142\161\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\002\001\uff35\000\002\001\uff34\000\002\001\uff33\000\010" +
    "\161\u011b\162\u011a\163\u011c\001\ufef0\000\002\001\uff04\000" +
    "\012\056\u01a9\065\u0135\114\250\205\u01aa\001\002\000\002" +
    "\001\uff40\000\124\031\124\032\150\033\154\034\155\041" +
    "\113\042\207\047\130\050\201\055\105\062\216\066\231" +
    "\101\160\106\226\107\122\113\172\114\131\116\223\120" +
    "\212\121\157\122\133\127\156\130\220\131\050\132\140" +
    "\141\117\142\161\157\205\160\204\167\052\173\166\174" +
    "\213\175\167\176\043\177\203\200\125\201\176\202\141" +
    "\203\047\207\046\210\153\211\143\001\002\000\124\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\116\223\120\212\121\157\122\133" +
    "\127\156\130\220\131\050\132\140\141\117\142\161\157" +
    "\205\160\204\167\052\173\166\174\213\175\167\176\043" +
    "\177\203\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\002\000\006\056\251\114\250\001\002" +
    "\000\002\001\uff38\000\004\056\u01ae\001\uff4b\000\124\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\116\223\120\212\121\157\122\133" +
    "\127\156\130\220\131\050\132\140\141\117\142\161\157" +
    "\205\160\204\167\052\173\166\174\213\175\167\176\043" +
    "\177\203\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\002\000\002\001\uff3b\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\uff49\000\004\154\u01b2\001\002\000\002\001" +
    "\ufe8c\000\124\031\124\032\150\033\154\034\155\041\305" +
    "\042\312\047\u016d\050\201\055\105\062\304\066\231\101" +
    "\160\106\276\107\122\113\277\114\131\116\223\120\212" +
    "\121\u016e\122\133\127\156\130\u016c\131\050\132\u0165\141" +
    "\117\142\u016b\157\u0163\160\u016f\167\052\173\166\174\u0164" +
    "\175\301\176\043\177\203\200\310\201\176\202\300\203" +
    "\047\207\046\210\153\211\143\001\002\000\004\110\u01b6" +
    "\001\uff2f\000\002\001\uff31\000\104\031\124\032\150\033" +
    "\154\034\155\041\305\042\312\047\u016d\055\105\062\304" +
    "\066\231\106\276\107\122\113\277\114\131\121\u016e\122" +
    "\133\130\u016c\131\050\132\u0165\142\u016b\157\u0163\160\u016f" +
    "\167\052\174\u0164\175\301\176\043\200\310\201\176\202" +
    "\300\203\047\207\046\210\153\211\143\001\002\000\066" +
    "\031\124\032\150\033\154\034\155\041\113\042\207\055" +
    "\105\062\216\066\231\106\226\107\122\113\172\114\131" +
    "\122\133\131\050\157\044\167\052\175\167\176\043\200" +
    "\125\201\176\202\141\203\047\207\046\210\153\211\143" +
    "\001\002\000\066\031\124\032\150\033\154\034\155\041" +
    "\113\042\207\055\105\062\216\066\231\106\226\107\122" +
    "\113\172\114\131\122\133\131\050\157\044\167\052\175" +
    "\167\176\043\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\066\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\055\105\062\216\066\231" +
    "\106\226\107\122\113\172\114\131\122\133\131\050\157" +
    "\044\167\052\175\167\176\043\200\125\201\176\202\141" +
    "\203\047\207\046\210\153\211\143\001\002\000\066\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\055\105" +
    "\062\216\066\231\106\226\107\122\113\172\114\131\122" +
    "\133\131\050\157\044\167\052\175\167\176\043\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\066\031\124\032\150\033\154\034\155\041\113" +
    "\042\207\055\105\062\216\066\231\106\226\107\122\113" +
    "\172\114\131\122\133\131\050\157\044\167\052\175\167" +
    "\176\043\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\002\000\066\031\124\032\150\033\154" +
    "\034\155\041\113\042\207\055\105\062\216\066\231\106" +
    "\226\107\122\113\172\114\131\122\133\131\050\157\044" +
    "\167\052\175\167\176\043\200\125\201\176\202\141\203" +
    "\047\207\046\210\153\211\143\001\002\000\066\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\055\105\062" +
    "\216\066\231\106\226\107\122\113\172\114\131\122\133" +
    "\131\050\157\044\167\052\175\167\176\043\200\125\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\002" +
    "\000\066\031\124\032\150\033\154\034\155\041\113\042" +
    "\207\055\105\062\216\066\231\106\226\107\122\113\172" +
    "\114\131\122\133\131\050\157\044\167\052\175\167\176" +
    "\043\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\066\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\055\105\062\216\066\231\106\226" +
    "\107\122\113\172\114\131\122\133\131\050\157\044\167" +
    "\052\175\167\176\043\200\125\201\176\202\141\203\047" +
    "\207\046\210\153\211\143\001\002\000\066\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\055\105\062\216" +
    "\066\231\106\226\107\122\113\172\114\131\122\133\131" +
    "\050\157\044\167\052\175\167\176\043\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\066\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\055\105\062\216\066\231\106\226\107\122\113\172\114" +
    "\131\122\133\131\050\157\044\167\052\175\167\176\043" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\002\000\066\031\124\032\150\033\154\034\155" +
    "\041\113\042\207\055\105\062\216\066\231\106\226\107" +
    "\122\113\172\114\131\122\133\131\050\157\044\167\052" +
    "\175\167\176\043\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\010\161\u011b\162\u011a" +
    "\163\u011c\001\ufefd\000\002\001\uff11\000\010\161\u011b\162" +
    "\u011a\163\u011c\001\ufefe\000\002\001\uff12\000\010\161\u011b" +
    "\162\u011a\163\u011c\001\ufef7\000\002\001\uff0b\000\010\161" +
    "\u011b\162\u011a\163\u011c\001\ufefc\000\002\001\uff10\000\010" +
    "\161\u011b\162\u011a\163\u011c\001\ufef5\000\002\001\uff09\000" +
    "\010\161\u011b\162\u011a\163\u011c\001\ufef6\000\002\001\uff0a" +
    "\000\010\161\u011b\162\u011a\163\u011c\001\ufef4\000\002\001" +
    "\uff08\000\010\161\u011b\162\u011a\163\u011c\001\ufefb\000\002" +
    "\001\uff0f\000\010\161\u011b\162\u011a\163\u011c\001\ufefa\000" +
    "\002\001\uff0e\000\010\161\u011b\162\u011a\163\u011c\001\ufeff" +
    "\000\002\001\uff13\000\010\161\u011b\162\u011a\163\u011c\001" +
    "\ufef8\000\002\001\uff0c\000\010\161\u011b\162\u011a\163\u011c" +
    "\001\ufef9\000\002\001\uff0d\000\002\001\ufe7e\000\002\001" +
    "\ufe81\000\002\001\uff17\000\002\001\uff16\000\100\031\124" +
    "\032\150\033\154\034\323\050\201\055\105\062\304\066" +
    "\325\101\160\107\122\113\324\114\131\116\223\120\212" +
    "\122\133\127\156\131\050\141\117\157\044\167\052\173" +
    "\166\175\301\176\043\177\203\200\326\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\002\001" +
    "\ufe88\000\100\031\124\032\150\033\154\034\155\050\201" +
    "\055\105\062\304\066\231\101\160\107\122\113\316\114" +
    "\131\116\223\120\212\122\133\127\156\131\050\141\117" +
    "\157\044\167\052\173\166\175\301\176\043\177\203\200" +
    "\317\201\176\202\300\203\047\207\046\210\153\211\143" +
    "\001\002\000\002\001\ufe93\000\004\155\u01e4\001\002\000" +
    "\002\001\ufe6e\000\010\157\056\201\051\207\046\001\002" +
    "\000\010\157\056\201\051\207\046\001\002\000\006\064" +
    "\u01ff\065\102\001\002\000\012\056\251\065\u01f9\114\250" +
    "\153\u01fb\001\002\000\012\115\233\157\056\201\051\207" +
    "\046\001\002\000\002\001\uff5a\000\006\064\uff7c\065\uff7c" +
    "\001\uff91\000\012\066\u01ed\157\056\201\051\207\046\001" +
    "\002\000\010\157\056\201\051\207\046\001\002\000\006" +
    "\064\104\065\102\001\002\000\006\064\u01f0\065\102\001" +
    "\002\000\124\031\124\032\150\033\154\034\155\041\113" +
    "\042\207\047\130\050\201\055\105\062\216\066\u01f2\101" +
    "\160\106\226\107\122\113\172\114\131\116\223\120\212" +
    "\121\157\122\133\127\156\130\220\131\050\132\140\141" +
    "\117\142\161\157\205\160\204\167\052\173\166\174\213" +
    "\175\167\176\043\177\203\200\125\201\176\202\141\203" +
    "\047\207\046\210\153\211\143\001\002\000\002\001\uff71" +
    "\000\126\031\124\032\150\033\154\034\155\041\113\042" +
    "\207\047\130\050\201\055\105\062\216\066\231\101\160" +
    "\106\226\107\122\113\172\114\131\115\233\116\223\120" +
    "\212\121\157\122\133\127\156\130\220\131\050\132\140" +
    "\141\117\142\161\157\205\160\204\167\052\173\166\174" +
    "\213\175\167\176\043\177\203\200\125\201\176\202\141" +
    "\203\047\207\046\210\153\211\143\001\002\000\002\001" +
    "\uff6b\000\006\064\u01f5\065\102\001\002\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\u01f7\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\002\001\uff72\000\126\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\047\130\050\201" +
    "\055\105\062\216\066\231\101\160\106\226\107\122\113" +
    "\172\114\131\115\233\116\223\120\212\121\157\122\133" +
    "\127\156\130\220\131\050\132\140\141\117\142\161\157" +
    "\205\160\204\167\052\173\166\174\213\175\167\176\043" +
    "\177\203\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\002\000\002\001\uff6c\000\020\066\u01fd" +
    "\075\u01e5\145\u01e6\151\u01ec\157\056\201\051\207\046\001" +
    "\002\000\004\153\u01fc\001\002\000\002\001\ufe69\000\002" +
    "\001\ufe6a\000\010\157\056\201\051\207\046\001\002\000" +
    "\002\001\uff5b\000\124\031\124\032\150\033\154\034\155" +
    "\041\113\042\207\047\130\050\201\055\105\062\216\066" +
    "\u0201\101\160\106\226\107\122\113\172\114\131\116\223" +
    "\120\212\121\157\122\133\127\156\130\220\131\050\132" +
    "\140\141\117\142\161\157\205\160\204\167\052\173\166" +
    "\174\213\175\167\176\043\177\203\200\125\201\176\202" +
    "\141\203\047\207\046\210\153\211\143\001\002\000\002" +
    "\001\uff6f\000\126\031\124\032\150\033\154\034\155\041" +
    "\113\042\207\047\130\050\201\055\105\062\216\066\231" +
    "\101\160\106\226\107\122\113\172\114\131\115\233\116" +
    "\223\120\212\121\157\122\133\127\156\130\220\131\050" +
    "\132\140\141\117\142\161\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\002\001\uff69\000\006\064\u0204\065\102\001\002\000\124" +
    "\031\124\032\150\033\154\034\155\041\113\042\207\047" +
    "\130\050\201\055\105\062\216\066\u0206\101\160\106\226" +
    "\107\122\113\172\114\131\116\223\120\212\121\157\122" +
    "\133\127\156\130\220\131\050\132\140\141\117\142\161" +
    "\157\205\160\204\167\052\173\166\174\213\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\002\001\uff74\000\126\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\231\101\160\106\226\107" +
    "\122\113\172\114\131\115\233\116\223\120\212\121\157" +
    "\122\133\127\156\130\220\131\050\132\140\141\117\142" +
    "\161\157\205\160\204\167\052\173\166\174\213\175\167" +
    "\176\043\177\203\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\002\001\uff6e\000\006" +
    "\064\u0209\065\102\001\002\000\124\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\047\130\050\201\055\105" +
    "\062\216\066\u020b\101\160\106\226\107\122\113\172\114" +
    "\131\116\223\120\212\121\157\122\133\127\156\130\220" +
    "\131\050\132\140\141\117\142\161\157\205\160\204\167" +
    "\052\173\166\174\213\175\167\176\043\177\203\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\002\001\uff73\000\126\031\124\032\150\033\154" +
    "\034\155\041\113\042\207\047\130\050\201\055\105\062" +
    "\216\066\231\101\160\106\226\107\122\113\172\114\131" +
    "\115\233\116\223\120\212\121\157\122\133\127\156\130" +
    "\220\131\050\132\140\141\117\142\161\157\205\160\204" +
    "\167\052\173\166\174\213\175\167\176\043\177\203\200" +
    "\125\201\176\202\141\203\047\207\046\210\153\211\143" +
    "\001\002\000\002\001\uff6d\000\010\161\u011b\162\u011a\163" +
    "\u011c\001\ufef3\000\002\001\uff07\000\002\001\ufebc\000\002" +
    "\001\ufebf\000\100\031\124\032\150\033\154\034\155\050" +
    "\201\055\105\062\304\066\231\101\160\107\122\113\316" +
    "\114\131\116\223\120\212\122\133\127\156\131\050\141" +
    "\117\157\044\167\052\173\166\175\301\176\043\177\203" +
    "\200\317\201\176\202\300\203\047\207\046\210\153\211" +
    "\143\001\002\000\002\001\ufeb3\000\010\056\251\065\u0135" +
    "\114\250\001\002\000\002\001\uff3d\000\100\031\124\032" +
    "\150\033\154\034\155\050\201\055\105\062\304\066\231" +
    "\101\160\107\122\113\316\114\131\116\223\120\212\122" +
    "\133\127\156\131\050\141\117\157\044\167\052\173\166" +
    "\175\301\176\043\177\203\200\317\201\176\202\300\203" +
    "\047\207\046\210\153\211\143\001\002\000\100\031\124" +
    "\032\150\033\154\034\155\050\201\055\105\062\304\066" +
    "\231\101\160\107\122\113\316\114\131\116\223\120\212" +
    "\122\133\127\156\131\050\141\117\157\044\167\052\173" +
    "\166\175\301\176\043\177\203\200\317\201\176\202\300" +
    "\203\047\207\046\210\153\211\143\001\002\000\002\001" +
    "\ufe9b\000\002\001\ufe97\000\002\001\ufec2\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\124\031\124\032\150\033\154\034" +
    "\155\041\305\042\312\047\u016d\050\201\055\105\062\304" +
    "\066\231\101\160\106\276\107\122\113\277\114\131\116" +
    "\223\120\212\121\u016e\122\133\127\156\130\u016c\131\050" +
    "\132\u0165\141\117\142\u016b\157\u0163\160\u016f\167\052\173" +
    "\166\174\u0164\175\301\176\043\177\203\200\310\201\176" +
    "\202\300\203\047\207\046\210\153\211\143\001\002\000" +
    "\002\001\uff1b\000\002\001\uff25\000\002\001\uff23\000\004" +
    "\071\u0220\001\uff22\000\124\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\047\130\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\116" +
    "\223\120\212\121\157\122\133\127\156\130\220\131\050" +
    "\132\140\141\117\142\161\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\002\001\uff24\000\002\001\uff27\000\002\001\uff26\000\002" +
    "\001\ufe6c\000\002\001\uff63\000\126\031\124\032\150\033" +
    "\154\034\155\041\113\042\207\047\130\050\201\055\105" +
    "\062\216\066\231\101\160\106\226\107\122\113\172\114" +
    "\131\115\233\116\223\120\212\121\157\122\133\127\156" +
    "\130\220\131\050\132\140\141\117\142\161\157\205\160" +
    "\204\167\052\173\166\174\213\175\167\176\043\177\203" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\002\000\002\001\uff5d\000\002\001\uff7b\000\010" +
    "\064\u01f0\065\102\073\u022a\001\002\000\124\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\047\130\050\201" +
    "\055\105\062\216\066\u022c\101\160\106\226\107\122\113" +
    "\172\114\131\116\223\120\212\121\157\122\133\127\156" +
    "\130\220\131\050\132\140\141\117\142\161\157\205\160" +
    "\204\167\052\173\166\174\213\175\167\176\043\177\203" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\002\000\002\001\uff64\000\126\031\124\032\150" +
    "\033\154\034\155\041\113\042\207\047\130\050\201\055" +
    "\105\062\216\066\231\101\160\106\226\107\122\113\172" +
    "\114\131\115\233\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\002\001\uff5e\000\002\001\uff54\000" +
    "\004\064\u0230\001\002\000\124\031\124\032\150\033\154" +
    "\034\155\041\113\042\207\047\130\050\201\055\105\062" +
    "\216\066\231\101\160\106\226\107\122\113\172\114\131" +
    "\116\223\120\212\121\157\122\133\127\156\130\220\131" +
    "\050\132\140\141\117\142\161\157\205\160\204\167\052" +
    "\173\166\174\213\175\167\176\043\177\203\200\125\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\002" +
    "\000\004\114\250\001\002\000\002\001\uffa8\000\124\031" +
    "\124\032\150\033\154\034\155\041\113\042\207\047\130" +
    "\050\201\055\105\062\216\066\u0235\101\160\106\226\107" +
    "\122\113\172\114\131\116\223\120\212\121\157\122\133" +
    "\127\156\130\220\131\050\132\140\141\117\142\161\157" +
    "\205\160\204\167\052\173\166\174\213\175\167\176\043" +
    "\177\203\200\125\201\176\202\141\203\047\207\046\210" +
    "\153\211\143\001\002\000\002\001\uff62\000\126\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\115\233\116\223\120\212\121\157\122" +
    "\133\127\156\130\220\131\050\132\140\141\117\142\161" +
    "\157\205\160\204\167\052\173\166\174\213\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\002\001\uff5c\000\022\065" +
    "\076\066\066\075\070\145\067\151\077\157\056\201\051" +
    "\207\046\001\uff57\000\002\001\uff55\000\010\064\u0209\065" +
    "\102\073\u023a\001\002\000\124\031\124\032\150\033\154" +
    "\034\155\041\113\042\207\047\130\050\201\055\105\062" +
    "\216\066\u023c\101\160\106\226\107\122\113\172\114\131" +
    "\116\223\120\212\121\157\122\133\127\156\130\220\131" +
    "\050\132\140\141\117\142\161\157\205\160\204\167\052" +
    "\173\166\174\213\175\167\176\043\177\203\200\125\201" +
    "\176\202\141\203\047\207\046\210\153\211\143\001\002" +
    "\000\002\001\uff66\000\126\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\047\130\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\115" +
    "\233\116\223\120\212\121\157\122\133\127\156\130\220" +
    "\131\050\132\140\141\117\142\161\157\205\160\204\167" +
    "\052\173\166\174\213\175\167\176\043\177\203\200\125" +
    "\201\176\202\141\203\047\207\046\210\153\211\143\001" +
    "\002\000\002\001\uff60\000\010\064\u0204\065\102\073\u023f" +
    "\001\002\000\124\031\124\032\150\033\154\034\155\041" +
    "\113\042\207\047\130\050\201\055\105\062\216\066\u0241" +
    "\101\160\106\226\107\122\113\172\114\131\116\223\120" +
    "\212\121\157\122\133\127\156\130\220\131\050\132\140" +
    "\141\117\142\161\157\205\160\204\167\052\173\166\174" +
    "\213\175\167\176\043\177\203\200\125\201\176\202\141" +
    "\203\047\207\046\210\153\211\143\001\002\000\002\001" +
    "\uff67\000\126\031\124\032\150\033\154\034\155\041\113" +
    "\042\207\047\130\050\201\055\105\062\216\066\231\101" +
    "\160\106\226\107\122\113\172\114\131\115\233\116\223" +
    "\120\212\121\157\122\133\127\156\130\220\131\050\132" +
    "\140\141\117\142\161\157\205\160\204\167\052\173\166" +
    "\174\213\175\167\176\043\177\203\200\125\201\176\202" +
    "\141\203\047\207\046\210\153\211\143\001\002\000\002" +
    "\001\uff61\000\010\064\u01f5\065\102\073\u0244\001\002\000" +
    "\124\031\124\032\150\033\154\034\155\041\113\042\207" +
    "\047\130\050\201\055\105\062\216\066\u0246\101\160\106" +
    "\226\107\122\113\172\114\131\116\223\120\212\121\157" +
    "\122\133\127\156\130\220\131\050\132\140\141\117\142" +
    "\161\157\205\160\204\167\052\173\166\174\213\175\167" +
    "\176\043\177\203\200\125\201\176\202\141\203\047\207" +
    "\046\210\153\211\143\001\002\000\002\001\uff65\000\126" +
    "\031\124\032\150\033\154\034\155\041\113\042\207\047" +
    "\130\050\201\055\105\062\216\066\231\101\160\106\226" +
    "\107\122\113\172\114\131\115\233\116\223\120\212\121" +
    "\157\122\133\127\156\130\220\131\050\132\140\141\117" +
    "\142\161\157\205\160\204\167\052\173\166\174\213\175" +
    "\167\176\043\177\203\200\125\201\176\202\141\203\047" +
    "\207\046\210\153\211\143\001\002\000\002\001\uff5f\000" +
    "\004\155\u0249\001\002\000\004\064\u024a\001\002\000\124" +
    "\031\124\032\150\033\154\034\155\041\113\042\207\047" +
    "\130\050\201\055\105\062\216\066\231\101\160\106\226" +
    "\107\122\113\172\114\131\116\223\120\212\121\157\122" +
    "\133\127\156\130\220\131\050\132\140\141\117\142\161" +
    "\157\205\160\204\167\052\173\166\174\213\175\167\176" +
    "\043\177\203\200\125\201\176\202\141\203\047\207\046" +
    "\210\153\211\143\001\002\000\004\114\250\001\002\000" +
    "\002\001\uffa9\000\004\114\250\001\002\000\002\001\uffa7" +
    "\000\006\125\u0252\210\u0251\001\002\000\004\155\u025b\001" +
    "\002\000\004\155\uffbc\001\ufe77\000\004\210\u025a\001\002" +
    "\000\004\070\u0254\001\002\000\004\070\u0255\001\002\000" +
    "\006\125\u0252\210\u0256\001\002\000\002\001\ufe77\000\004" +
    "\064\u0258\001\uffbb\000\004\210\u0259\001\002\000\002\001" +
    "\uffba\000\002\001\ufe76\000\002\001\uff8d\000\124\031\124" +
    "\032\150\033\154\034\155\041\113\042\207\047\130\050" +
    "\201\055\105\062\216\066\231\101\160\106\226\107\122" +
    "\113\172\114\131\116\223\120\212\121\157\122\133\127" +
    "\156\130\220\131\050\132\140\141\117\142\161\157\205" +
    "\160\204\167\052\173\166\174\213\175\167\176\043\177" +
    "\203\200\125\201\176\202\141\203\047\207\046\210\153" +
    "\211\143\001\002\000\022\065\076\066\066\075\070\145" +
    "\067\151\077\157\056\201\051\207\046\001\uff57\000\022" +
    "\065\076\066\066\075\070\145\067\151\077\157\056\201" +
    "\051\207\046\001\uff57\000\004\154\u0260\001\002\000\004" +
    "\064\u0261\001\002\000\124\031\124\032\150\033\154\034" +
    "\155\041\113\042\207\047\130\050\201\055\105\062\216" +
    "\066\231\101\160\106\226\107\122\113\172\114\131\116" +
    "\223\120\212\121\157\122\133\127\156\130\220\131\050" +
    "\132\140\141\117\142\161\157\205\160\204\167\052\173" +
    "\166\174\213\175\167\176\043\177\203\200\125\201\176" +
    "\202\141\203\047\207\046\210\153\211\143\001\002\000" +
    "\004\114\250\001\002\000\002\001\uffab\000\004\155\u0265" +
    "\001\002\000\004\064\u0266\001\002\000\124\031\124\032" +
    "\150\033\154\034\155\041\113\042\207\047\130\050\201" +
    "\055\105\062\216\066\231\101\160\106\226\107\122\113" +
    "\172\114\131\116\223\120\212\121\157\122\133\127\156" +
    "\130\220\131\050\132\140\141\117\142\161\157\205\160" +
    "\204\167\052\173\166\174\213\175\167\176\043\177\203" +
    "\200\125\201\176\202\141\203\047\207\046\210\153\211" +
    "\143\001\002\000\004\114\250\001\002\000\002\001\uffac" +
    "\000\004\114\250\001\002\000\002\001\uffaa\000\002\001" +
    "\uff84\000\006\053\u0271\115\u0272\001\ufffb\000\004\070\u026e" +
    "\001\002\000\004\172\u026f\001\002\000\012\070\u026d\157" +
    "\056\201\051\207\046\001\002\000\002\001\uff83\000\010" +
    "\157\056\201\051\207\046\001\002\000\020\131\050\157" +
    "\044\167\052\176\043\201\051\203\047\207\046\001\uff8a" +
    "\000\004\154\u0278\001\002\000\004\065\u0276\001\uff89\000" +
    "\002\001\uff88\000\020\131\050\157\044\167\052\176\043" +
    "\201\051\203\047\207\046\001\002\000\002\001\uff87\000" +
    "\004\053\u0279\001\ufff9\000\010\157\056\201\051\207\046" +
    "\001\002\000\002\001\ufff8\000\002\001\ufffa\000\010\114" +
    "\250\115\u028b\122\u028a\001\uff91\000\004\070\u027e\001\002" +
    "\000\010\157\056\201\051\207\046\001\002\000\010\114" +
    "\250\115\u0282\122\u0281\001\002\000\002\001\uffa1\000\022" +
    "\065\076\066\066\075\070\145\067\151\077\157\056\201" +
    "\051\207\046\001\uff57\000\022\065\076\066\066\075\070" +
    "\145\067\151\077\157\056\201\051\207\046\001\uff57\000" +
    "\004\154\u0284\001\002\000\004\114\250\001\002\000\002" +
    "\001\uffa2\000\004\155\u0287\001\002\000\004\114\250\001" +
    "\002\000\002\001\uffa3\000\002\001\uffa4\000\022\065\076" +
    "\066\066\075\070\145\067\151\077\157\056\201\051\207" +
    "\046\001\uff57\000\022\065\076\066\066\075\070\145\067" +
    "\151\077\157\056\201\051\207\046\001\uff57\000\004\154" +
    "\u028d\001\002\000\004\114\250\001\002\000\002\001\uffa5" +
    "\000\004\155\u0290\001\002\000\004\114\250\001\002\000" +
    "\002\001\uffa6\000\012\073\u0293\114\250\115\u0297\122\u0296" +
    "\001\002\000\124\031\124\032\150\033\154\034\155\041" +
    "\113\042\207\047\130\050\201\055\105\062\216\066\231" +
    "\101\160\106\226\107\122\113\172\114\131\116\223\120" +
    "\212\121\157\122\133\127\156\130\220\131\050\132\140" +
    "\141\117\142\161\157\205\160\204\167\052\173\166\174" +
    "\213\175\167\176\043\177\203\200\125\201\176\202\141" +
    "\203\047\207\046\210\153\211\143\001\002\000\002\001" +
    "\uffaf\000\002\001\uffae\000\012\155\u029d\157\056\201\051" +
    "\207\046\001\002\000\012\154\u0299\157\056\201\051\207" +
    "\046\001\002\000\006\065\102\154\u029b\001\002\000\006" +
    "\073\u0293\114\250\001\002\000\002\001\uffb0\000\006\073" +
    "\u0293\114\250\001\002\000\002\001\uffb1\000\006\073\u0293" +
    "\114\250\001\002\000\006\065\102\155\u029f\001\002\000" +
    "\006\073\u0293\114\250\001\002\000\002\001\uffb3\000\002" +
    "\001\uffb2\000\002\001\uffad\000\004\114\u02a4\001\002\000" +
    "\012\153\u02a6\157\056\201\051\207\046\001\002\000\006" +
    "\065\102\153\u02a7\001\002\000\002\001\ufff6\000\002\001" +
    "\ufff7\000\006\063\021\156\025\001\002\000\012\114\250" +
    "\157\056\201\051\207\046\001\002\000\014\102\u02ad\114" +
    "\250\157\056\201\051\207\046\001\uffd9\000\004\102\u02ad" +
    "\001\uffd9\000\004\076\u02f0\001\uffde\000\012\074\u02b1\114" +
    "\u02ae\125\u0252\210\u02b2\001\002\000\010\057\u02cf\166\u02ce" +
    "\171\u02d0\001\002\000\014\131\u02cb\176\u02ca\201\051\203" +
    "\u02cc\207\046\001\002\000\006\201\051\207\046\001\uffcd" +
    "\000\004\210\u02c0\001\002\000\026\061\u02be\070\ufe77\113" +
    "\uffbc\131\uffbc\157\u02bd\167\uffbc\176\uffbc\201\uffbc\203\uffbc" +
    "\207\uffbc\001\uffdc\000\006\113\uffce\167\uffce\001\uffb4\000" +
    "\002\001\uffd8\000\004\065\u02ba\001\uffda\000\002\001\uffb5" +
    "\000\006\113\u02b9\167\u02b8\001\002\000\002\001\uffd5\000" +
    "\002\001\uffd6\000\012\074\u02b1\114\u02ae\125\u0252\210\u02bb" +
    "\001\002\000\006\070\ufe77\157\u02bd\001\uffbc\000\002\001" +
    "\uffd7\000\002\001\uffd4\000\012\074\u02b1\114\u02ae\125\u0252" +
    "\210\u02bb\001\002\000\004\065\u02ba\001\uffdb\000\006\064" +
    "\u02c1\070\u02c2\001\uffb9\000\004\210\u02c7\001\002\000\004" +
    "\070\u02c3\001\002\000\004\210\u02c4\001\002\000\004\064" +
    "\u02c5\001\uffb8\000\004\210\u02c6\001\002\000\002\001\uffb7" +
    "\000\002\001\uffb6\000\002\001\uffcf\000\002\001\uffd0\000" +
    "\002\001\uffd2\000\002\001\uffd1\000\002\001\uffd3\000\004" +
    "\153\u02ee\001\002\000\004\064\u02d8\001\002\000\004\064" +
    "\u02d6\001\002\000\004\064\u02d4\001\002\000\004\065\u02d2" +
    "\001\uffcb\000\010\057\u02cf\166\u02ce\171\u02d0\001\002\000" +
    "\002\001\uffca\000\004\210\u02d5\001\002\000\002\001\uffc8" +
    "\000\004\210\u02d7\001\002\000\002\001\uffc9\000\016\057" +
    "\u02db\060\u02dd\115\u02e0\117\u02dc\125\u0252\210\u02de\001\002" +
    "\000\002\001\uffc6\000\004\070\u02e9\001\002\000\002\001" +
    "\uffc5\000\002\001\uffbe\000\004\122\u02e6\001\002\000\004" +
    "\070\ufe77\001\uffc1\000\002\001\uffc7\000\012\060\u02dd\117" +
    "\u02dc\125\u0252\210\u02de\001\002\000\004\154\u02e5\001\002" +
    "\000\004\065\u02e3\001\uffc3\000\012\060\u02dd\117\u02dc\125" +
    "\u0252\210\u02de\001\002\000\002\001\uffc2\000\002\001\uffc4" +
    "\000\004\210\u02e7\001\002\000\004\155\u02e8\001\002\000" +
    "\002\001\uffbd\000\004\070\u02ea\001\002\000\006\125\u0252" +
    "\210\u0256\001\002\000\004\064\u02ec\001\uffc0\000\004\210" +
    "\u02ed\001\002\000\002\001\uffbf\000\002\001\uffcc\000\002" +
    "\001\uffe3\000\004\210\u02f1\001\002\000\002\001\uffdd\000" +
    "\004\102\u02ad\001\uffd9\000\004\102\u02ad\001\uffd9\000\004" +
    "\076\u02f0\001\uffde\000\002\001\uffdf\000\004\076\u02f0\001" +
    "\uffde\000\002\001\uffe4\000\004\076\u02f0\001\uffde\000\002" +
    "\001\uffe0\000\012\065\102\073\u02fd\077\u02fc\112\u02fb\001" +
    "\uff92\000\020\131\050\157\044\167\052\176\043\201\051" +
    "\203\047\207\046\001\002\000\020\131\050\157\044\167" +
    "\052\176\043\201\051\203\047\207\046\001\002\000\020" +
    "\131\050\157\044\167\052\176\043\201\051\203\047\207" +
    "\046\001\002\000\004\114\u02ff\001\002\000\022\065\076" +
    "\066\066\075\070\145\067\151\077\157\056\201\051\207" +
    "\046\001\uff57\000\004\153\u0301\001\002\000\004\114\250" +
    "\001\uff51\000\002\001\uff9d\000\002\001\uff50\000\004\146" +
    "\u0306\001\uff93\000\002\001\uff86\000\020\131\050\157\044" +
    "\167\052\176\043\201\051\203\047\207\046\001\002\000" +
    "\002\001\uff85\000\002\001\uff95\000\004\146\u0306\001\uff94" +
    "\000\002\001\uff96\000\002\001\uff98\000\006\115\u030e\123" +
    "\u030d\001\uffff\000\012\074\u0310\157\056\201\051\207\046" +
    "\001\002\000\012\074\u0310\157\056\201\051\207\046\001" +
    "\002\000\002\001\uff78\000\010\157\056\201\051\207\046" +
    "\001\002\000\006\065\u0312\154\u0313\001\002\000\012\074" +
    "\u0318\157\056\201\051\207\046\001\002\000\004\123\u0314" +
    "\001\ufffe\000\010\157\056\201\051\207\046\001\002\000" +
    "\006\065\102\104\u0316\001\002\000\002\001\ufffc\000\002" +
    "\001\uff76\000\010\157\056\201\051\207\046\001\002\000" +
    "\002\001\uff75\000\002\001\uff77\000\006\065\u0312\104\u031c" +
    "\001\002\000\002\001\ufffd\000\004\114\250\001\002\000" +
    "\004\114\250\001\002\000\002\001\ufff5\000\002\001\ufff4" +
    "\000\002\001\ufff3\000\002\001\uff7a\000\006\064\u0325\065" +
    "\u0324\001\002\000\010\157\056\201\051\207\046\001\002" +
    "\000\020\131\050\157\044\167\052\176\043\201\051\203" +
    "\047\207\046\001\002\000\004\146\u0306\001\uff9e\000\002" +
    "\001\uff79\000\014\102\u02ad\114\250\157\056\201\051\207" +
    "\046\001\uffd9\000\004\102\u02ad\001\uffd9\000\004\076\u02f0" +
    "\001\uffde\000\002\001\uffe5\000\004\102\u02ad\001\uffd9\000" +
    "\004\102\u02ad\001\uffd9\000\004\076\u02f0\001\uffde\000\002" +
    "\001\uffe1\000\004\076\u02f0\001\uffde\000\002\001\uffe6\000" +
    "\004\076\u02f0\001\uffde\000\002\001\uffe2\000\004\114\250" +
    "\001\002\000\004\114\250\001\002\000\002\001\ufff2\000" +
    "\002\001\ufff1\000\002\001\ufff0\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0337\000\006\124\003\125\004\001\001\000\002\001" +
    "\001\000\026\012\026\013\013\040\014\063\007\104\006" +
    "\113\021\114\015\116\023\117\025\141\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\u0335\065\u0334\066\040\070\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\032\u0328\065\u0327\066\040" +
    "\070\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\u0322\001\001\000\012\032\u031e\065\u031d\066\040" +
    "\070\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\065\u030b\066\040\070\044\001\001\000\006\116\023" +
    "\117\u0309\001\001\000\002\001\001\000\012\065\070\066" +
    "\040\070\044\071\u02f9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\065\u02a2\066\040\070\044\001\001\000\010" +
    "\065\u0291\066\040\070\044\001\001\000\012\065\u027b\066" +
    "\040\070\044\120\u027c\001\001\000\012\065\u026a\066\040" +
    "\067\u026b\070\044\001\001\000\012\065\041\066\040\070" +
    "\044\120\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\065" +
    "\054\066\040\070\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\142\002\111\003\110" +
    "\004\172\005\107\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\210\024\207\025\162\026\161\031\u024c" +
    "\032\216\041\106\042\105\043\214\044\213\045\224\046" +
    "\223\047\201\050\177\065\205\066\040\070\044\074\126" +
    "\075\125\076\117\077\115\100\151\101\150\102\122\103" +
    "\120\105\134\106\133\110\164\111\163\120\141\131\144" +
    "\132\143\133\176\134\174\135\221\136\220\137\170\140" +
    "\167\001\001\000\020\014\072\015\071\017\u0247\065\070" +
    "\066\040\070\044\071\073\001\001\000\020\014\072\015" +
    "\071\017\074\065\070\066\040\070\044\071\073\001\001" +
    "\000\012\065\070\066\040\070\044\071\u0242\001\001\000" +
    "\012\065\070\066\040\070\044\071\u023d\001\001\000\012" +
    "\065\070\066\040\070\044\071\u0238\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\072\015\071\017\u022d\065" +
    "\070\066\040\070\044\071\073\001\001\000\012\065\070" +
    "\066\040\070\044\071\100\001\001\000\012\065\070\066" +
    "\040\070\044\071\u0228\001\001\000\002\001\001\000\010" +
    "\065\u0227\066\040\070\044\001\001\000\142\002\111\003" +
    "\110\004\172\005\107\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\210\024\207\025\162\026\161\031" +
    "\u0224\032\216\041\106\042\105\043\214\044\213\045\224" +
    "\046\223\047\201\050\177\065\205\066\040\070\044\074" +
    "\126\075\125\076\117\077\115\100\151\101\150\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\131" +
    "\144\132\143\133\176\134\174\135\221\136\220\137\170" +
    "\140\167\001\001\000\142\002\111\003\110\004\172\005" +
    "\107\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\210\024\207\025\162\026\161\031\131\032\216\041" +
    "\106\042\105\043\214\044\213\045\224\046\223\047\201" +
    "\050\177\065\205\066\040\070\044\074\126\075\125\076" +
    "\117\077\115\100\151\101\150\102\122\103\120\105\134" +
    "\106\133\110\164\111\163\120\141\131\144\132\143\133" +
    "\176\134\174\135\221\136\220\137\170\140\167\001\001" +
    "\000\010\065\u0223\066\040\070\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\172\005\u0218\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\346\103\302\106\310\111\163\120\141\140\167\001" +
    "\001\000\004\107\u0215\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\072\015\u0132\016\u0212\065\070\066" +
    "\040\070\044\071\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\004\172\005\u020f\006\136\007\135\021\114" +
    "\022\113\023\210\024\207\032\216\047\201\050\177\065" +
    "\205\066\040\070\044\076\u020e\077\337\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\137\170\140" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\004\172\006\136\007\135\021\114\022\113\023\210\024" +
    "\207\032\216\047\201\050\177\065\205\066\040\070\044" +
    "\076\117\077\115\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\u020d\132\u020c\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\152\002" +
    "\111\003\110\004\172\005\107\006\136\007\135\010\146" +
    "\011\145\014\u01e9\020\u01e7\021\114\022\113\023\210\024" +
    "\207\025\162\026\161\031\254\032\216\034\255\041\106" +
    "\042\105\043\214\044\213\045\224\046\223\047\201\050" +
    "\177\065\u01ea\066\040\070\044\071\u01e6\074\126\075\125" +
    "\076\117\077\115\100\151\101\150\102\122\103\120\105" +
    "\134\106\133\110\164\111\163\120\141\131\144\132\143" +
    "\133\176\134\174\135\221\136\220\137\170\140\167\001" +
    "\001\000\002\001\001\000\142\002\111\003\110\004\172" +
    "\005\107\006\136\007\135\010\146\011\145\021\114\022" +
    "\113\023\210\024\207\025\162\026\161\031\u01e2\032\216" +
    "\041\106\042\105\043\214\044\213\045\224\046\223\047" +
    "\201\050\177\065\205\066\040\070\044\074\126\075\125" +
    "\076\117\077\115\100\151\101\150\102\122\103\120\105" +
    "\134\106\133\110\164\111\163\120\141\131\144\132\143" +
    "\133\176\134\174\135\221\136\220\137\170\140\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\110\004\172\005\u01dc\006\136\007" +
    "\135\010\146\011\145\021\114\022\113\023\210\024\207" +
    "\032\216\047\201\050\177\065\205\066\040\070\044\074" +
    "\u01dd\075\u0198\076\117\077\115\102\122\103\120\105\134" +
    "\106\133\110\164\111\163\120\141\131\144\132\143\133" +
    "\176\134\174\135\221\136\220\137\170\140\167\001\001" +
    "\000\024\004\172\005\u01db\032\216\065\205\066\040\070" +
    "\044\120\141\137\u01da\140\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\072\015\u0132\016\u01a6" +
    "\065\070\066\040\070\044\071\073\001\001\000\076\004" +
    "\172\006\136\007\135\021\114\022\113\023\210\024\207" +
    "\032\216\047\201\050\177\065\205\066\040\070\044\076" +
    "\117\077\115\102\122\103\120\105\134\106\133\110\164" +
    "\111\163\120\141\131\u01a5\132\u01a4\133\176\134\174\135" +
    "\221\136\220\137\170\140\167\001\001\000\142\002\111" +
    "\003\110\004\172\005\107\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\210\024\207\025\162\026\161" +
    "\031\u019d\032\216\041\106\042\105\043\214\044\213\045" +
    "\224\046\223\047\201\050\177\065\205\066\040\070\044" +
    "\074\126\075\125\076\117\077\115\100\151\101\150\102" +
    "\122\103\120\105\134\106\133\110\164\111\163\120\141" +
    "\131\144\132\143\133\176\134\174\135\221\136\220\137" +
    "\170\140\167\001\001\000\076\004\172\006\136\007\135" +
    "\021\114\022\113\023\210\024\207\032\216\047\201\050" +
    "\177\065\205\066\040\070\044\076\117\077\115\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\131" +
    "\u019c\132\u019b\133\176\134\174\135\221\136\220\137\170" +
    "\140\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\072\015\u0132" +
    "\016\u0158\065\070\066\040\070\044\071\073\001\001\000" +
    "\024\004\172\005\u0157\032\216\065\205\066\040\070\044" +
    "\120\141\137\u0156\140\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\172\005\u0155\006\136\007\135" +
    "\021\114\022\113\023\210\024\207\032\216\047\201\050" +
    "\177\065\205\066\040\070\044\076\u0154\077\u0102\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\137" +
    "\170\140\167\001\001\000\002\001\001\000\142\002\111" +
    "\003\110\004\172\005\107\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\210\024\207\025\162\026\161" +
    "\031\u0153\032\216\041\106\042\105\043\214\044\213\045" +
    "\224\046\223\047\201\050\177\065\205\066\040\070\044" +
    "\074\126\075\125\076\117\077\115\100\151\101\150\102" +
    "\122\103\120\105\134\106\133\110\164\111\163\120\141" +
    "\131\144\132\143\133\176\134\174\135\221\136\220\137" +
    "\170\140\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\072\015" +
    "\u0132\016\u0140\065\070\066\040\070\044\071\073\001\001" +
    "\000\002\001\001\000\020\014\072\015\u0132\016\u013e\065" +
    "\070\066\040\070\044\071\073\001\001\000\076\004\172" +
    "\006\136\007\135\021\114\022\113\023\210\024\207\032" +
    "\216\047\201\050\177\065\205\066\040\070\044\076\117" +
    "\077\115\102\122\103\120\105\134\106\133\110\164\111" +
    "\163\120\141\131\u013d\132\u013c\133\176\134\174\135\221" +
    "\136\220\137\170\140\167\001\001\000\076\004\172\006" +
    "\136\007\135\021\114\022\113\023\210\024\207\032\216" +
    "\047\201\050\177\065\205\066\040\070\044\076\117\077" +
    "\115\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\u013a\132\u0139\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\042" +
    "\004\172\005\u0137\007\306\022\301\024\207\032\216\050" +
    "\274\065\205\066\040\070\044\077\313\103\302\106\310" +
    "\111\163\120\141\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\072\015\u0132\016\u0133\065\070" +
    "\066\040\070\044\071\073\001\001\000\076\004\172\006" +
    "\136\007\135\021\114\022\113\023\210\024\207\032\216" +
    "\047\201\050\177\065\205\066\040\070\044\076\117\077" +
    "\115\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\u0131\132\u0130\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\172\005\u012f\032\216\065\205\066" +
    "\040\070\044\120\141\137\u012e\140\347\001\001\000\002" +
    "\001\001\000\076\004\172\006\136\007\135\021\114\022" +
    "\113\023\210\024\207\032\216\047\201\050\177\065\205" +
    "\066\040\070\044\076\117\077\115\102\122\103\120\105" +
    "\134\106\133\110\164\111\163\120\141\131\u0118\132\u0117" +
    "\133\176\134\174\135\221\136\220\137\170\140\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\062\242" +
    "\065\241\066\040\070\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\004\172\005\231\006\136\007\135" +
    "\021\114\022\113\023\210\024\207\032\216\047\201\050" +
    "\177\065\205\066\040\070\044\076\227\077\226\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\137" +
    "\170\140\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\146\002\111\003" +
    "\110\004\172\005\107\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\210\024\207\025\162\026\161\031" +
    "\233\032\216\036\234\037\235\041\106\042\105\043\214" +
    "\044\213\045\224\046\223\047\201\050\177\065\205\066" +
    "\040\070\044\074\126\075\125\076\117\077\115\100\151" +
    "\101\150\102\122\103\120\105\134\106\133\110\164\111" +
    "\163\120\141\131\144\132\143\133\176\134\174\135\221" +
    "\136\220\137\170\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\142\002\111\003\110" +
    "\004\172\005\107\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\210\024\207\025\162\026\161\031\237" +
    "\032\216\041\106\042\105\043\214\044\213\045\224\046" +
    "\223\047\201\050\177\065\205\066\040\070\044\074\126" +
    "\075\125\076\117\077\115\100\151\101\150\102\122\103" +
    "\120\105\134\106\133\110\164\111\163\120\141\131\144" +
    "\132\143\133\176\134\174\135\221\136\220\137\170\140" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\244\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\006\032\251\035\246\001\001\000\012\062" +
    "\260\065\241\066\040\070\044\001\001\000\002\001\001" +
    "\000\144\002\111\003\110\004\172\005\107\006\136\007" +
    "\135\010\146\011\145\021\114\022\113\023\210\024\207" +
    "\025\162\026\161\031\254\032\216\034\255\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\142" +
    "\002\111\003\110\004\172\005\107\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\210\024\207\025\162" +
    "\026\161\031\252\032\216\041\106\042\105\043\214\044" +
    "\213\045\224\046\223\047\201\050\177\065\205\066\040" +
    "\070\044\074\126\075\125\076\117\077\115\100\151\101" +
    "\150\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\144\132\143\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\142\002" +
    "\111\003\110\004\172\005\107\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\210\024\207\025\162\026" +
    "\161\031\257\032\216\041\106\042\105\043\214\044\213" +
    "\045\224\046\223\047\201\050\177\065\205\066\040\070" +
    "\044\074\126\075\125\076\117\077\115\100\151\101\150" +
    "\102\122\103\120\105\134\106\133\110\164\111\163\120" +
    "\141\131\144\132\143\133\176\134\174\135\221\136\220" +
    "\137\170\140\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\172\005\u0116\007\306" +
    "\022\301\024\207\032\216\050\274\065\205\066\040\070" +
    "\044\077\115\103\302\106\310\111\163\120\141\134\u0115" +
    "\140\167\001\001\000\044\004\172\005\u0114\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\115\103\302\106\310\111\163\120\141\134\u0113\140" +
    "\167\001\001\000\044\004\172\005\u0112\007\306\022\301" +
    "\024\207\032\216\050\274\065\205\066\040\070\044\077" +
    "\115\103\302\106\310\111\163\120\141\134\u0111\140\167" +
    "\001\001\000\044\004\172\005\u0110\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\115" +
    "\103\302\106\310\111\163\120\141\134\u010f\140\167\001" +
    "\001\000\044\004\172\005\u010e\007\306\022\301\024\207" +
    "\032\216\050\274\065\205\066\040\070\044\077\115\103" +
    "\302\106\310\111\163\120\141\134\u010d\140\167\001\001" +
    "\000\044\004\172\005\u010c\007\306\022\301\024\207\032" +
    "\216\050\274\065\205\066\040\070\044\077\115\103\302" +
    "\106\310\111\163\120\141\134\u010b\140\167\001\001\000" +
    "\044\004\172\005\u010a\007\306\022\301\024\207\032\216" +
    "\050\274\065\205\066\040\070\044\077\115\103\302\106" +
    "\310\111\163\120\141\134\u0109\140\167\001\001\000\044" +
    "\004\172\005\u0108\007\306\022\301\024\207\032\216\050" +
    "\274\065\205\066\040\070\044\077\115\103\302\106\310" +
    "\111\163\120\141\134\u0107\140\167\001\001\000\044\004" +
    "\172\005\u0106\007\306\022\301\024\207\032\216\050\274" +
    "\065\205\066\040\070\044\077\115\103\302\106\310\111" +
    "\163\120\141\134\u0105\140\167\001\001\000\044\004\172" +
    "\005\u0104\007\306\022\301\024\207\032\216\050\274\065" +
    "\205\066\040\070\044\077\115\103\302\106\310\111\163" +
    "\120\141\134\u0103\140\167\001\001\000\044\004\172\005" +
    "\312\007\306\022\301\024\207\032\216\050\274\065\205" +
    "\066\040\070\044\077\115\103\302\106\310\111\163\120" +
    "\141\134\305\140\167\001\001\000\002\001\001\000\040" +
    "\004\172\007\306\022\301\024\207\032\216\050\274\065" +
    "\205\066\040\070\044\077\226\103\302\106\310\111\163" +
    "\120\141\140\167\001\001\000\040\004\172\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\u0102\103\302\106\310\111\163\120\141\140\167\001" +
    "\001\000\020\004\172\032\216\065\205\066\040\070\044" +
    "\120\141\140\u0101\001\001\000\020\004\172\032\216\065" +
    "\205\066\040\070\044\120\141\140\u0100\001\001\000\004" +
    "\107\372\001\001\000\002\001\001\000\020\004\172\032" +
    "\216\065\205\066\040\070\044\120\141\140\347\001\001" +
    "\000\040\004\172\007\306\022\301\024\207\032\216\050" +
    "\274\065\205\066\040\070\044\077\346\103\302\106\310" +
    "\111\163\120\141\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\172\007\306\022\301\024\207" +
    "\032\216\050\274\065\205\066\040\070\044\077\337\103" +
    "\302\106\310\111\163\120\141\140\167\001\001\000\002" +
    "\001\001\000\040\004\172\007\306\022\301\024\207\032" +
    "\216\050\274\065\205\066\040\070\044\077\313\103\302" +
    "\106\310\111\163\120\141\140\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\172\007\317\024\207" +
    "\032\216\065\205\066\040\070\044\120\141\140\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\146\002\111\003\110\004\172\005\107\006\136\007" +
    "\135\010\146\011\145\021\114\022\113\023\210\024\207" +
    "\025\162\026\161\031\233\032\216\036\327\037\235\041" +
    "\106\042\105\043\214\044\213\045\224\046\223\047\201" +
    "\050\177\065\205\066\040\070\044\074\126\075\125\076" +
    "\117\077\115\100\151\101\150\102\122\103\120\105\134" +
    "\106\133\110\164\111\163\120\141\131\144\132\143\133" +
    "\176\134\174\135\221\136\220\137\170\140\167\001\001" +
    "\000\020\004\172\032\216\065\205\066\040\070\044\120" +
    "\141\140\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\146\002\111\003\110" +
    "\004\172\005\107\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\210\024\207\025\162\026\161\031\233" +
    "\032\216\036\332\037\235\041\106\042\105\043\214\044" +
    "\213\045\224\046\223\047\201\050\177\065\205\066\040" +
    "\070\044\074\126\075\125\076\117\077\115\100\151\101" +
    "\150\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\144\132\143\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\146\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\233\032\216\036\335\037" +
    "\235\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\172\007\306\022\301\024\207\032\216" +
    "\050\274\065\205\066\040\070\044\077\345\103\302\106" +
    "\310\111\163\120\141\140\167\001\001\000\040\004\172" +
    "\007\306\022\301\024\207\032\216\050\274\065\205\066" +
    "\040\070\044\077\344\103\302\106\310\111\163\120\141" +
    "\140\167\001\001\000\040\004\172\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\343" +
    "\103\302\106\310\111\163\120\141\140\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\172\007\306\022" +
    "\301\024\207\032\216\050\351\065\205\066\040\070\044" +
    "\106\310\111\163\120\141\140\167\001\001\000\002\001" +
    "\001\000\032\004\172\007\306\022\301\024\207\032\216" +
    "\065\205\066\040\070\044\106\310\111\353\120\141\140" +
    "\167\001\001\000\002\001\001\000\026\004\172\007\306" +
    "\024\207\032\216\065\205\066\040\070\044\106\377\120" +
    "\141\140\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\172\007\306\022\301" +
    "\024\207\032\216\065\205\066\040\070\044\106\310\111" +
    "\376\120\141\140\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\004" +
    "\172\005\u012d\007\306\022\301\024\207\032\216\050\274" +
    "\065\205\066\040\070\044\077\115\103\302\106\310\111" +
    "\163\120\141\134\u011c\136\u012c\140\167\001\001\000\046" +
    "\004\172\005\u012b\007\306\022\301\024\207\032\216\050" +
    "\274\065\205\066\040\070\044\077\115\103\302\106\310" +
    "\111\163\120\141\134\u011c\136\u012a\140\167\001\001\000" +
    "\046\004\172\005\u011e\007\306\022\301\024\207\032\216" +
    "\050\274\065\205\066\040\070\044\077\115\103\302\106" +
    "\310\111\163\120\141\134\u011c\136\u011d\140\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\172\007\306\022\301\024\207\032\216\050\274" +
    "\065\205\066\040\070\044\077\115\103\302\106\310\111" +
    "\163\120\141\134\u0115\140\167\001\001\000\042\004\172" +
    "\007\306\022\301\024\207\032\216\050\274\065\205\066" +
    "\040\070\044\077\115\103\302\106\310\111\163\120\141" +
    "\134\u0113\140\167\001\001\000\042\004\172\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\115\103\302\106\310\111\163\120\141\134\u0111\140" +
    "\167\001\001\000\042\004\172\007\306\022\301\024\207" +
    "\032\216\050\274\065\205\066\040\070\044\077\115\103" +
    "\302\106\310\111\163\120\141\134\u010f\140\167\001\001" +
    "\000\042\004\172\007\306\022\301\024\207\032\216\050" +
    "\274\065\205\066\040\070\044\077\115\103\302\106\310" +
    "\111\163\120\141\134\u010d\140\167\001\001\000\042\004" +
    "\172\007\306\022\301\024\207\032\216\050\274\065\205" +
    "\066\040\070\044\077\115\103\302\106\310\111\163\120" +
    "\141\134\u010b\140\167\001\001\000\042\004\172\007\306" +
    "\022\301\024\207\032\216\050\274\065\205\066\040\070" +
    "\044\077\115\103\302\106\310\111\163\120\141\134\u0109" +
    "\140\167\001\001\000\042\004\172\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\115" +
    "\103\302\106\310\111\163\120\141\134\u0107\140\167\001" +
    "\001\000\042\004\172\007\306\022\301\024\207\032\216" +
    "\050\274\065\205\066\040\070\044\077\115\103\302\106" +
    "\310\111\163\120\141\134\u0105\140\167\001\001\000\042" +
    "\004\172\007\306\022\301\024\207\032\216\050\274\065" +
    "\205\066\040\070\044\077\115\103\302\106\310\111\163" +
    "\120\141\134\u0103\140\167\001\001\000\042\004\172\007" +
    "\306\022\301\024\207\032\216\050\274\065\205\066\040" +
    "\070\044\077\115\103\302\106\310\111\163\120\141\134" +
    "\305\140\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\251\035\u0135\001\001\000\016\014" +
    "\072\015\u0136\065\070\066\040\070\044\071\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\251\035\u013f\001\001\000\002\001\001\000\006" +
    "\032\251\035\u0141\001\001\000\002\001\001\000\142\002" +
    "\111\003\110\004\172\005\107\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\210\024\207\025\162\026" +
    "\161\031\u0146\032\216\041\106\042\105\043\214\044\213" +
    "\045\224\046\223\047\201\050\177\065\205\066\040\070" +
    "\044\074\126\075\125\076\117\077\115\100\151\101\150" +
    "\102\122\103\120\105\134\106\133\110\164\111\163\120" +
    "\141\131\144\132\143\133\176\134\174\135\221\136\220" +
    "\137\170\140\167\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u0144\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\006\032\251\035\u0145\001\001\000\002\001" +
    "\001\000\002\001\001\000\142\002\111\003\110\004\172" +
    "\005\107\006\136\007\135\010\146\011\145\021\114\022" +
    "\113\023\210\024\207\025\162\026\161\031\u0148\032\216" +
    "\041\106\042\105\043\214\044\213\045\224\046\223\047" +
    "\201\050\177\065\205\066\040\070\044\074\126\075\125" +
    "\076\117\077\115\100\151\101\150\102\122\103\120\105" +
    "\134\106\133\110\164\111\163\120\141\131\144\132\143" +
    "\133\176\134\174\135\221\136\220\137\170\140\167\001" +
    "\001\000\002\001\001\000\034\004\172\005\u014a\007\306" +
    "\022\301\024\207\032\216\065\205\066\040\070\044\106" +
    "\310\111\353\120\141\140\167\001\001\000\002\001\001" +
    "\000\004\070\u014c\001\001\000\002\001\001\000\042\004" +
    "\172\005\u0152\007\306\022\301\024\207\032\216\050\274" +
    "\065\205\066\040\070\044\077\345\103\302\106\310\111" +
    "\163\120\141\140\167\001\001\000\042\004\172\005\u0151" +
    "\007\306\022\301\024\207\032\216\050\274\065\205\066" +
    "\040\070\044\077\344\103\302\106\310\111\163\120\141" +
    "\140\167\001\001\000\042\004\172\005\u0150\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\343\103\302\106\310\111\163\120\141\140\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\251\035\u0159" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u015e\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u015c\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\006" +
    "\032\251\035\u015d\001\001\000\002\001\001\000\002\001" +
    "\001\000\142\002\111\003\110\004\172\005\107\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\210\024" +
    "\207\025\162\026\161\031\u0160\032\216\041\106\042\105" +
    "\043\214\044\213\045\224\046\223\047\201\050\177\065" +
    "\205\066\040\070\044\074\126\075\125\076\117\077\115" +
    "\100\151\101\150\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\144\132\143\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\002\001" +
    "\001\000\064\003\u0167\004\172\005\u016f\007\306\011\u0166" +
    "\022\301\024\207\032\216\042\u0168\044\213\046\223\050" +
    "\274\065\205\066\040\070\044\075\125\077\115\103\302" +
    "\106\310\111\163\120\141\132\u0165\134\u011c\136\u0169\140" +
    "\167\001\001\000\046\004\172\007\306\022\301\024\207" +
    "\032\216\050\274\065\205\066\040\070\044\077\115\103" +
    "\302\106\310\111\163\120\141\132\u019a\134\u011c\136\u0169" +
    "\140\167\001\001\000\046\004\172\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\115" +
    "\103\302\106\310\111\163\120\141\132\u0199\134\u011c\136" +
    "\u0169\140\167\001\001\000\052\004\172\007\306\011\u0166" +
    "\022\301\024\207\032\216\050\274\065\205\066\040\070" +
    "\044\075\u0198\077\115\103\302\106\310\111\163\120\141" +
    "\132\u0165\134\u011c\136\u0169\140\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\172\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\115" +
    "\103\302\106\310\111\163\120\141\132\u0177\134\u011c\136" +
    "\u0169\140\167\001\001\000\046\004\172\007\306\022\301" +
    "\024\207\032\216\050\274\065\205\066\040\070\044\077" +
    "\115\103\302\106\310\111\163\120\141\132\u0176\134\u011c" +
    "\136\u0169\140\167\001\001\000\046\004\172\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\115\103\302\106\310\111\163\120\141\132\u0175\134" +
    "\u011c\136\u0169\140\167\001\001\000\046\004\172\007\306" +
    "\022\301\024\207\032\216\050\274\065\205\066\040\070" +
    "\044\077\115\103\302\106\310\111\163\120\141\132\u0174" +
    "\134\u011c\136\u0169\140\167\001\001\000\046\004\172\007" +
    "\306\022\301\024\207\032\216\050\274\065\205\066\040" +
    "\070\044\077\115\103\302\106\310\111\163\120\141\132" +
    "\u0170\134\u011c\136\u0169\140\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\172\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\115" +
    "\103\302\106\310\111\163\120\141\134\u011c\136\u012c\140" +
    "\167\001\001\000\044\004\172\007\306\022\301\024\207" +
    "\032\216\050\274\065\205\066\040\070\044\077\115\103" +
    "\302\106\310\111\163\120\141\134\u011c\136\u012a\140\167" +
    "\001\001\000\044\004\172\007\306\022\301\024\207\032" +
    "\216\050\274\065\205\066\040\070\044\077\115\103\302" +
    "\106\310\111\163\120\141\134\u011c\136\u011d\140\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u0167\004\172\007\306\011" +
    "\u0166\022\301\024\207\032\216\042\u017b\044\u017c\046\223" +
    "\050\274\065\205\066\040\070\044\075\125\077\115\103" +
    "\302\106\310\111\163\120\141\132\u0165\134\u011c\136\u0169" +
    "\140\167\001\001\000\052\004\172\007\306\011\u0166\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\075\u017a\077\115\103\302\106\310\111\163\120\141\132" +
    "\u0165\134\u011c\136\u0169\140\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\u0167\004" +
    "\172\007\306\011\u0166\022\301\024\207\032\216\044\u017f" +
    "\046\u017e\050\274\065\205\066\040\070\044\075\125\077" +
    "\115\103\302\106\310\111\163\120\141\132\u0165\134\u011c" +
    "\136\u0169\140\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\172\007\306\022\301\024\207\032\216" +
    "\050\274\065\205\066\040\070\044\077\115\103\302\106" +
    "\310\111\163\120\141\132\u0197\134\u011c\136\u0169\140\167" +
    "\001\001\000\046\004\172\007\306\022\301\024\207\032" +
    "\216\050\274\065\205\066\040\070\044\077\115\103\302" +
    "\106\310\111\163\120\141\132\u0196\134\u011c\136\u0169\140" +
    "\167\001\001\000\046\004\172\007\306\022\301\024\207" +
    "\032\216\050\274\065\205\066\040\070\044\077\115\103" +
    "\302\106\310\111\163\120\141\132\u0195\134\u011c\136\u0169" +
    "\140\167\001\001\000\046\004\172\007\306\022\301\024" +
    "\207\032\216\050\274\065\205\066\040\070\044\077\115" +
    "\103\302\106\310\111\163\120\141\132\u0194\134\u011c\136" +
    "\u0169\140\167\001\001\000\046\004\172\007\306\022\301" +
    "\024\207\032\216\050\274\065\205\066\040\070\044\077" +
    "\115\103\302\106\310\111\163\120\141\132\u0193\134\u011c" +
    "\136\u0169\140\167\001\001\000\046\004\172\007\306\022" +
    "\301\024\207\032\216\050\274\065\205\066\040\070\044" +
    "\077\115\103\302\106\310\111\163\120\141\132\u0192\134" +
    "\u011c\136\u0169\140\167\001\001\000\046\004\172\007\306" +
    "\022\301\024\207\032\216\050\274\065\205\066\040\070" +
    "\044\077\115\103\302\106\310\111\163\120\141\132\u0191" +
    "\134\u011c\136\u0169\140\167\001\001\000\046\004\172\007" +
    "\306\022\301\024\207\032\216\050\274\065\205\066\040" +
    "\070\044\077\115\103\302\106\310\111\163\120\141\132" +
    "\u0190\134\u011c\136\u0169\140\167\001\001\000\046\004\172" +
    "\007\306\022\301\024\207\032\216\050\274\065\205\066" +
    "\040\070\044\077\115\103\302\106\310\111\163\120\141" +
    "\132\u018f\134\u011c\136\u0169\140\167\001\001\000\046\004" +
    "\172\007\306\022\301\024\207\032\216\050\274\065\205" +
    "\066\040\070\044\077\115\103\302\106\310\111\163\120" +
    "\141\132\u018e\134\u011c\136\u0169\140\167\001\001\000\046" +
    "\004\172\007\306\022\301\024\207\032\216\050\274\065" +
    "\205\066\040\070\044\077\115\103\302\106\310\111\163" +
    "\120\141\132\u018d\134\u011c\136\u0169\140\167\001\001\000" +
    "\046\004\172\007\306\022\301\024\207\032\216\050\274" +
    "\065\205\066\040\070\044\077\115\103\302\106\310\111" +
    "\163\120\141\132\u018c\134\u011c\136\u0169\140\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\142\002\111\003\110" +
    "\004\172\005\107\006\136\007\135\010\146\011\145\021" +
    "\114\022\113\023\210\024\207\025\162\026\161\031\u01a3" +
    "\032\216\041\106\042\105\043\214\044\213\045\224\046" +
    "\223\047\201\050\177\065\205\066\040\070\044\074\126" +
    "\075\125\076\117\077\115\100\151\101\150\102\122\103" +
    "\120\105\134\106\133\110\164\111\163\120\141\131\144" +
    "\132\143\133\176\134\174\135\221\136\220\137\170\140" +
    "\167\001\001\000\142\002\111\003\110\004\172\005\107" +
    "\006\136\007\135\010\146\011\145\021\114\022\113\023" +
    "\210\024\207\025\162\026\161\031\u01a2\032\216\041\106" +
    "\042\105\043\214\044\213\045\224\046\223\047\201\050" +
    "\177\065\205\066\040\070\044\074\126\075\125\076\117" +
    "\077\115\100\151\101\150\102\122\103\120\105\134\106" +
    "\133\110\164\111\163\120\141\131\144\132\143\133\176" +
    "\134\174\135\221\136\220\137\170\140\167\001\001\000" +
    "\142\002\111\003\110\004\172\005\107\006\136\007\135" +
    "\010\146\011\145\021\114\022\113\023\210\024\207\025" +
    "\162\026\161\031\u01a1\032\216\041\106\042\105\043\214" +
    "\044\213\045\224\046\223\047\201\050\177\065\205\066" +
    "\040\070\044\074\126\075\125\076\117\077\115\100\151" +
    "\101\150\102\122\103\120\105\134\106\133\110\164\111" +
    "\163\120\141\131\144\132\143\133\176\134\174\135\221" +
    "\136\220\137\170\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\251\035\u01a7\001\001\000\002\001" +
    "\001\000\142\002\111\003\110\004\172\005\107\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\210\024" +
    "\207\025\162\026\161\031\u01ac\032\216\041\106\042\105" +
    "\043\214\044\213\045\224\046\223\047\201\050\177\065" +
    "\205\066\040\070\044\074\126\075\125\076\117\077\115" +
    "\100\151\101\150\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\144\132\143\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\142\002" +
    "\111\003\110\004\172\005\107\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\210\024\207\025\162\026" +
    "\161\031\u01aa\032\216\041\106\042\105\043\214\044\213" +
    "\045\224\046\223\047\201\050\177\065\205\066\040\070" +
    "\044\074\126\075\125\076\117\077\115\100\151\101\150" +
    "\102\122\103\120\105\134\106\133\110\164\111\163\120" +
    "\141\131\144\132\143\133\176\134\174\135\221\136\220" +
    "\137\170\140\167\001\001\000\006\032\251\035\u01ab\001" +
    "\001\000\002\001\001\000\002\001\001\000\142\002\111" +
    "\003\110\004\172\005\107\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\210\024\207\025\162\026\161" +
    "\031\u01ae\032\216\041\106\042\105\043\214\044\213\045" +
    "\224\046\223\047\201\050\177\065\205\066\040\070\044" +
    "\074\126\075\125\076\117\077\115\100\151\101\150\102" +
    "\122\103\120\105\134\106\133\110\164\111\163\120\141" +
    "\131\144\132\143\133\176\134\174\135\221\136\220\137" +
    "\170\140\167\001\001\000\002\001\001\000\146\002\111" +
    "\003\110\004\172\005\107\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\210\024\207\025\162\026\161" +
    "\031\233\032\216\036\u01b0\037\235\041\106\042\105\043" +
    "\214\044\213\045\224\046\223\047\201\050\177\065\205" +
    "\066\040\070\044\074\126\075\125\076\117\077\115\100" +
    "\151\101\150\102\122\103\120\105\134\106\133\110\164" +
    "\111\163\120\141\131\144\132\143\133\176\134\174\135" +
    "\221\136\220\137\170\140\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\u0167\004\172\005\u01b4\007" +
    "\306\011\u0166\022\301\024\207\026\u01b3\032\216\042\105" +
    "\044\213\046\223\050\274\065\205\066\040\070\044\075" +
    "\125\077\115\103\302\106\310\111\163\120\141\132\u0165" +
    "\134\u011c\136\u0169\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0167\004\172\007\306\011\u0166" +
    "\022\301\024\207\032\216\042\u0168\044\213\046\223\050" +
    "\274\065\205\066\040\070\044\075\125\077\115\103\302" +
    "\106\310\111\163\120\141\132\u0165\134\u011c\136\u0169\140" +
    "\167\001\001\000\076\004\172\006\136\007\135\021\114" +
    "\022\113\023\210\024\207\032\216\047\201\050\177\065" +
    "\205\066\040\070\044\076\117\077\115\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\u01d9\132" +
    "\u01d8\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\076\004\172\006\136\007\135\021\114\022" +
    "\113\023\210\024\207\032\216\047\201\050\177\065\205" +
    "\066\040\070\044\076\117\077\115\102\122\103\120\105" +
    "\134\106\133\110\164\111\163\120\141\131\u01d7\132\u01d6" +
    "\133\176\134\174\135\221\136\220\137\170\140\167\001" +
    "\001\000\076\004\172\006\136\007\135\021\114\022\113" +
    "\023\210\024\207\032\216\047\201\050\177\065\205\066" +
    "\040\070\044\076\117\077\115\102\122\103\120\105\134" +
    "\106\133\110\164\111\163\120\141\131\u01d5\132\u01d4\133" +
    "\176\134\174\135\221\136\220\137\170\140\167\001\001" +
    "\000\076\004\172\006\136\007\135\021\114\022\113\023" +
    "\210\024\207\032\216\047\201\050\177\065\205\066\040" +
    "\070\044\076\117\077\115\102\122\103\120\105\134\106" +
    "\133\110\164\111\163\120\141\131\u01d3\132\u01d2\133\176" +
    "\134\174\135\221\136\220\137\170\140\167\001\001\000" +
    "\076\004\172\006\136\007\135\021\114\022\113\023\210" +
    "\024\207\032\216\047\201\050\177\065\205\066\040\070" +
    "\044\076\117\077\115\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\u01d1\132\u01d0\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\076" +
    "\004\172\006\136\007\135\021\114\022\113\023\210\024" +
    "\207\032\216\047\201\050\177\065\205\066\040\070\044" +
    "\076\117\077\115\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\u01cf\132\u01ce\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\076\004" +
    "\172\006\136\007\135\021\114\022\113\023\210\024\207" +
    "\032\216\047\201\050\177\065\205\066\040\070\044\076" +
    "\117\077\115\102\122\103\120\105\134\106\133\110\164" +
    "\111\163\120\141\131\u01cd\132\u01cc\133\176\134\174\135" +
    "\221\136\220\137\170\140\167\001\001\000\076\004\172" +
    "\006\136\007\135\021\114\022\113\023\210\024\207\032" +
    "\216\047\201\050\177\065\205\066\040\070\044\076\117" +
    "\077\115\102\122\103\120\105\134\106\133\110\164\111" +
    "\163\120\141\131\u01cb\132\u01ca\133\176\134\174\135\221" +
    "\136\220\137\170\140\167\001\001\000\076\004\172\006" +
    "\136\007\135\021\114\022\113\023\210\024\207\032\216" +
    "\047\201\050\177\065\205\066\040\070\044\076\117\077" +
    "\115\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\u01c9\132\u01c8\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\076\004\172\006\136" +
    "\007\135\021\114\022\113\023\210\024\207\032\216\047" +
    "\201\050\177\065\205\066\040\070\044\076\117\077\115" +
    "\102\122\103\120\105\134\106\133\110\164\111\163\120" +
    "\141\131\u01c7\132\u01c6\133\176\134\174\135\221\136\220" +
    "\137\170\140\167\001\001\000\076\004\172\006\136\007" +
    "\135\021\114\022\113\023\210\024\207\032\216\047\201" +
    "\050\177\065\205\066\040\070\044\076\117\077\115\102" +
    "\122\103\120\105\134\106\133\110\164\111\163\120\141" +
    "\131\u01c5\132\u01c4\133\176\134\174\135\221\136\220\137" +
    "\170\140\167\001\001\000\076\004\172\006\136\007\135" +
    "\021\114\022\113\023\210\024\207\032\216\047\201\050" +
    "\177\065\205\066\040\070\044\076\117\077\115\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\131" +
    "\u01c3\132\u01c2\133\176\134\174\135\221\136\220\137\170" +
    "\140\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\172\005\u01df\032\216\065\205\066\040\070\044" +
    "\120\141\140\326\001\001\000\002\001\001\000\026\004" +
    "\172\005\u01e1\007\317\024\207\032\216\065\205\066\040" +
    "\070\044\120\141\140\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\070\066\040" +
    "\070\044\071\u0207\001\001\000\012\065\070\066\040\070" +
    "\044\071\u0202\001\001\000\002\001\001\000\006\032\251" +
    "\035\u01f9\001\001\000\012\065\070\066\040\070\044\071" +
    "\u01f3\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\065\070\066\040\070\044\071\u01ed\001\001\000\012\065" +
    "\070\066\040\070\044\071\u01ee\001\001\000\002\001\001" +
    "\000\002\001\001\000\142\002\111\003\110\004\172\005" +
    "\107\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\210\024\207\025\162\026\161\031\u01f0\032\216\041" +
    "\106\042\105\043\214\044\213\045\224\046\223\047\201" +
    "\050\177\065\205\066\040\070\044\074\126\075\125\076" +
    "\117\077\115\100\151\101\150\102\122\103\120\105\134" +
    "\106\133\110\164\111\163\120\141\131\144\132\143\133" +
    "\176\134\174\135\221\136\220\137\170\140\167\001\001" +
    "\000\002\001\001\000\142\002\111\003\110\004\172\005" +
    "\107\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\210\024\207\025\162\026\161\031\u01f2\032\216\041" +
    "\106\042\105\043\214\044\213\045\224\046\223\047\201" +
    "\050\177\065\205\066\040\070\044\074\126\075\125\076" +
    "\117\077\115\100\151\101\150\102\122\103\120\105\134" +
    "\106\133\110\164\111\163\120\141\131\144\132\143\133" +
    "\176\134\174\135\221\136\220\137\170\140\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\142\002\111\003" +
    "\110\004\172\005\107\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\210\024\207\025\162\026\161\031" +
    "\u01f5\032\216\041\106\042\105\043\214\044\213\045\224" +
    "\046\223\047\201\050\177\065\205\066\040\070\044\074" +
    "\126\075\125\076\117\077\115\100\151\101\150\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\131" +
    "\144\132\143\133\176\134\174\135\221\136\220\137\170" +
    "\140\167\001\001\000\002\001\001\000\142\002\111\003" +
    "\110\004\172\005\107\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\210\024\207\025\162\026\161\031" +
    "\u01f7\032\216\041\106\042\105\043\214\044\213\045\224" +
    "\046\223\047\201\050\177\065\205\066\040\070\044\074" +
    "\126\075\125\076\117\077\115\100\151\101\150\102\122" +
    "\103\120\105\134\106\133\110\164\111\163\120\141\131" +
    "\144\132\143\133\176\134\174\135\221\136\220\137\170" +
    "\140\167\001\001\000\002\001\001\000\014\014\u01fd\065" +
    "\070\066\040\070\044\071\u01e6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\065\070\066" +
    "\040\070\044\071\u01f3\001\001\000\002\001\001\000\142" +
    "\002\111\003\110\004\172\005\107\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\210\024\207\025\162" +
    "\026\161\031\u01ff\032\216\041\106\042\105\043\214\044" +
    "\213\045\224\046\223\047\201\050\177\065\205\066\040" +
    "\070\044\074\126\075\125\076\117\077\115\100\151\101" +
    "\150\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\144\132\143\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\142" +
    "\002\111\003\110\004\172\005\107\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\210\024\207\025\162" +
    "\026\161\031\u0201\032\216\041\106\042\105\043\214\044" +
    "\213\045\224\046\223\047\201\050\177\065\205\066\040" +
    "\070\044\074\126\075\125\076\117\077\115\100\151\101" +
    "\150\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\144\132\143\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u0204\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u0206\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u0209\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u020b\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\172" +
    "\005\u0211\007\306\022\301\024\207\032\216\050\351\065" +
    "\205\066\040\070\044\106\310\111\163\120\141\140\167" +
    "\001\001\000\002\001\001\000\006\032\251\035\u0213\001" +
    "\001\000\002\001\001\000\030\004\172\005\u0217\007\306" +
    "\024\207\032\216\065\205\066\040\070\044\106\377\120" +
    "\141\140\167\001\001\000\034\004\172\005\u0216\007\306" +
    "\022\301\024\207\032\216\065\205\066\040\070\044\106" +
    "\310\111\376\120\141\140\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\130\002\111\003" +
    "\110\004\172\005\u021d\006\136\007\135\010\146\011\145" +
    "\021\114\022\113\023\210\024\207\032\216\041\u021c\042" +
    "\u017b\043\214\044\u021e\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\144\132\143\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\054\004\172\005\u021b" +
    "\007\306\011\u0166\022\301\024\207\032\216\050\274\065" +
    "\205\066\040\070\044\075\u017a\077\115\103\302\106\310" +
    "\111\163\120\141\132\u0165\134\u011c\136\u0169\140\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\124\002\111\003\110\004\172\005" +
    "\u0220\006\136\007\135\010\146\011\145\021\114\022\113" +
    "\023\210\024\207\032\216\043\u0221\044\u017f\045\u0222\046" +
    "\u017e\047\201\050\177\065\205\066\040\070\044\074\126" +
    "\075\125\076\117\077\115\102\122\103\120\105\134\106" +
    "\133\110\164\111\163\120\141\131\144\132\143\133\176" +
    "\134\174\135\221\136\220\137\170\140\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u0226\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\142\002\111\003\110\004\172\005\107\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\210\024" +
    "\207\025\162\026\161\031\u022a\032\216\041\106\042\105" +
    "\043\214\044\213\045\224\046\223\047\201\050\177\065" +
    "\205\066\040\070\044\074\126\075\125\076\117\077\115" +
    "\100\151\101\150\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\144\132\143\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\002\001" +
    "\001\000\142\002\111\003\110\004\172\005\107\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\210\024" +
    "\207\025\162\026\161\031\u022c\032\216\041\106\042\105" +
    "\043\214\044\213\045\224\046\223\047\201\050\177\065" +
    "\205\066\040\070\044\074\126\075\125\076\117\077\115" +
    "\100\151\101\150\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\144\132\143\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\142\002\111" +
    "\003\110\004\172\005\107\006\136\007\135\010\146\011" +
    "\145\021\114\022\113\023\210\024\207\025\162\026\161" +
    "\031\u0230\032\216\041\106\042\105\043\214\044\213\045" +
    "\224\046\223\047\201\050\177\065\205\066\040\070\044" +
    "\074\126\075\125\076\117\077\115\100\151\101\150\102" +
    "\122\103\120\105\134\106\133\110\164\111\163\120\141" +
    "\131\144\132\143\133\176\134\174\135\221\136\220\137" +
    "\170\140\167\001\001\000\004\032\u0231\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u0233\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u0235\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\002" +
    "\001\001\000\020\014\072\015\071\017\u0237\065\070\066" +
    "\040\070\044\071\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u023a\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u023c\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u023f\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\002\001\001\000\142\002\111\003\110\004" +
    "\172\005\107\006\136\007\135\010\146\011\145\021\114" +
    "\022\113\023\210\024\207\025\162\026\161\031\u0241\032" +
    "\216\041\106\042\105\043\214\044\213\045\224\046\223" +
    "\047\201\050\177\065\205\066\040\070\044\074\126\075" +
    "\125\076\117\077\115\100\151\101\150\102\122\103\120" +
    "\105\134\106\133\110\164\111\163\120\141\131\144\132" +
    "\143\133\176\134\174\135\221\136\220\137\170\140\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\142\002" +
    "\111\003\110\004\172\005\107\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\210\024\207\025\162\026" +
    "\161\031\u0244\032\216\041\106\042\105\043\214\044\213" +
    "\045\224\046\223\047\201\050\177\065\205\066\040\070" +
    "\044\074\126\075\125\076\117\077\115\100\151\101\150" +
    "\102\122\103\120\105\134\106\133\110\164\111\163\120" +
    "\141\131\144\132\143\133\176\134\174\135\221\136\220" +
    "\137\170\140\167\001\001\000\002\001\001\000\142\002" +
    "\111\003\110\004\172\005\107\006\136\007\135\010\146" +
    "\011\145\021\114\022\113\023\210\024\207\025\162\026" +
    "\161\031\u0246\032\216\041\106\042\105\043\214\044\213" +
    "\045\224\046\223\047\201\050\177\065\205\066\040\070" +
    "\044\074\126\075\125\076\117\077\115\100\151\101\150" +
    "\102\122\103\120\105\134\106\133\110\164\111\163\120" +
    "\141\131\144\132\143\133\176\134\174\135\221\136\220" +
    "\137\170\140\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\142\002\111\003\110\004\172" +
    "\005\107\006\136\007\135\010\146\011\145\021\114\022" +
    "\113\023\210\024\207\025\162\026\161\031\u024a\032\216" +
    "\041\106\042\105\043\214\044\213\045\224\046\223\047" +
    "\201\050\177\065\205\066\040\070\044\074\126\075\125" +
    "\076\117\077\115\100\151\101\150\102\122\103\120\105" +
    "\134\106\133\110\164\111\163\120\141\131\144\132\143" +
    "\133\176\134\174\135\221\136\220\137\170\140\167\001" +
    "\001\000\004\032\u024b\001\001\000\002\001\001\000\004" +
    "\032\u024d\001\001\000\002\001\001\000\006\051\u0252\052" +
    "\u024f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\142\002\111\003\110\004\172\005\107\006\136" +
    "\007\135\010\146\011\145\021\114\022\113\023\210\024" +
    "\207\025\162\026\161\031\u0268\032\216\041\106\042\105" +
    "\043\214\044\213\045\224\046\223\047\201\050\177\065" +
    "\205\066\040\070\044\074\126\075\125\076\117\077\115" +
    "\100\151\101\150\102\122\103\120\105\134\106\133\110" +
    "\164\111\163\120\141\131\144\132\143\133\176\134\174" +
    "\135\221\136\220\137\170\140\167\001\001\000\020\014" +
    "\072\015\071\017\u0263\065\070\066\040\070\044\071\073" +
    "\001\001\000\020\014\072\015\071\017\u025e\065\070\066" +
    "\040\070\044\071\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\142\002\111\003\110\004\172\005\107\006" +
    "\136\007\135\010\146\011\145\021\114\022\113\023\210" +
    "\024\207\025\162\026\161\031\u0261\032\216\041\106\042" +
    "\105\043\214\044\213\045\224\046\223\047\201\050\177" +
    "\065\205\066\040\070\044\074\126\075\125\076\117\077" +
    "\115\100\151\101\150\102\122\103\120\105\134\106\133" +
    "\110\164\111\163\120\141\131\144\132\143\133\176\134" +
    "\174\135\221\136\220\137\170\140\167\001\001\000\004" +
    "\032\u0262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\142\002\111\003\110\004\172\005\107" +
    "\006\136\007\135\010\146\011\145\021\114\022\113\023" +
    "\210\024\207\025\162\026\161\031\u0266\032\216\041\106" +
    "\042\105\043\214\044\213\045\224\046\223\047\201\050" +
    "\177\065\205\066\040\070\044\074\126\075\125\076\117" +
    "\077\115\100\151\101\150\102\122\103\120\105\134\106" +
    "\133\110\164\111\163\120\141\131\144\132\143\133\176" +
    "\134\174\135\221\136\220\137\170\140\167\001\001\000" +
    "\004\032\u0267\001\001\000\002\001\001\000\004\032\u0269" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\065\u026a" +
    "\066\040\067\u026f\070\044\001\001\000\002\001\001\000" +
    "\010\065\u027a\066\040\070\044\001\001\000\016\065\205" +
    "\066\040\070\044\120\u0274\121\u0273\122\u0272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\065\205\066\040\070\044\120\u0276\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\065\u0279\066\040\070\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0288\001\001\000\002\001\001\000\010\065\u027e\066\040" +
    "\070\044\001\001\000\004\032\u027f\001\001\000\002\001" +
    "\001\000\020\014\072\015\071\017\u0285\065\070\066\040" +
    "\070\044\071\073\001\001\000\020\014\072\015\071\017" +
    "\u0282\065\070\066\040\070\044\071\073\001\001\000\002" +
    "\001\001\000\004\032\u0284\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0287\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\072\015\071\017\u028e\065" +
    "\070\066\040\070\044\071\073\001\001\000\020\014\072" +
    "\015\071\017\u028b\065\070\066\040\070\044\071\073\001" +
    "\001\000\002\001\001\000\004\032\u028d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0290\001\001\000" +
    "\002\001\001\000\006\032\u0294\064\u0293\001\001\000\142" +
    "\002\111\003\110\004\172\005\107\006\136\007\135\010" +
    "\146\011\145\021\114\022\113\023\210\024\207\025\162" +
    "\026\161\031\u02a1\032\216\041\106\042\105\043\214\044" +
    "\213\045\224\046\223\047\201\050\177\065\205\066\040" +
    "\070\044\074\126\075\125\076\117\077\115\100\151\101" +
    "\150\102\122\103\120\105\134\106\133\110\164\111\163" +
    "\120\141\131\144\132\143\133\176\134\174\135\221\136" +
    "\220\137\170\140\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\065\070\066\040\070\044\071\u029d\001" +
    "\001\000\012\065\070\066\040\070\044\071\u0297\001\001" +
    "\000\002\001\001\000\006\032\u0294\064\u0299\001\001\000" +
    "\002\001\001\000\006\032\u0294\064\u029b\001\001\000\002" +
    "\001\001\000\006\032\u0294\064\u02a0\001\001\000\002\001" +
    "\001\000\006\032\u0294\064\u029f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\065\070\066\040\070\044\071\u02a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u02a8\001\001\000\012\032\u02aa\065\u02a9\066\040\070\044" +
    "\001\001\000\014\032\u02f2\065\u02f1\066\040\070\044\112" +
    "\u02f3\001\001\000\004\112\u02ab\001\001\000\004\030\u02ee" +
    "\001\001\000\022\027\u02b5\051\u0252\052\u02b2\053\u02b6\054" +
    "\u02af\126\u02ae\127\u02b3\130\u02b4\001\001\000\006\055\u02cc" +
    "\056\u02d0\001\001\000\006\066\u02c8\070\044\001\001\000" +
    "\006\066\u02c7\070\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\027\u02b5\051\u0252\052\u02b2\053" +
    "\u02b6\054\u02af\126\u02ae\127\u02bb\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\027\u02b5\051" +
    "\u0252\052\u02b2\053\u02b6\054\u02af\126\u02ae\127\u02b3\130\u02be" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\055\u02d2\056\u02d0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\051\u02d9\057\u02de\060\u02d8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\u02d9\060\u02e1\061\u02e0\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\051\u02d9\060\u02e1\061" +
    "\u02e3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u02ea\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u02f7" +
    "\001\001\000\004\112\u02f5\001\001\000\004\030\u02f4\001" +
    "\001\000\002\001\001\000\004\030\u02f6\001\001\000\002" +
    "\001\001\000\004\030\u02f8\001\001\000\002\001\001\000" +
    "\004\115\u02fd\001\001\000\014\065\205\066\040\070\044" +
    "\120\u0304\123\u0308\001\001\000\012\065\205\066\040\070" +
    "\044\120\u0307\001\001\000\014\065\205\066\040\070\044" +
    "\120\u0304\123\u0303\001\001\000\002\001\001\000\020\014" +
    "\072\015\071\017\u02ff\065\070\066\040\070\044\071\073" +
    "\001\001\000\002\001\001\000\006\032\u0302\033\u0301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\065\205\066\040\070\044\120" +
    "\u0306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\065\u030e\066\040\070\044\073\u031a\001\001" +
    "\000\012\065\u030e\066\040\070\044\073\u0310\001\001\000" +
    "\002\001\001\000\010\065\u0319\066\040\070\044\001\001" +
    "\000\002\001\001\000\010\065\u0316\066\040\070\044\001" +
    "\001\000\002\001\001\000\012\065\070\066\040\070\044" +
    "\071\u0314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\065\u0318\066\040\070\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u0320\001\001\000\004\032\u031f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\065\u0326" +
    "\066\040\070\044\001\001\000\014\065\205\066\040\070" +
    "\044\120\u0304\123\u0325\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\032\u032c\065\u032b\066\040\070\044\112" +
    "\u032d\001\001\000\004\112\u0329\001\001\000\004\030\u032a" +
    "\001\001\000\002\001\001\000\004\112\u0331\001\001\000" +
    "\004\112\u032f\001\001\000\004\030\u032e\001\001\000\002" +
    "\001\001\000\004\030\u0330\001\001\000\002\001\001\000" +
    "\004\030\u0332\001\001\000\002\001\001\000\004\032\u0337" +
    "\001\001\000\004\032\u0336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = "yes".equals(System.getProperty("debug"));
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");

    ch.put(CompSym.BVEQ,  "fun");
    ch.put(CompSym.BVOR,  "fun");
    ch.put(CompSym.BVAND, "fun");
    ch.put(CompSym.BVXOR, "fun");
    ch.put(CompSym.BVNOT, "fun");
    ch.put(CompSym.BVNEG, "fun");
    ch.put(CompSym.BVSHL, "fun");
    ch.put(CompSym.BVSHR, "fun");
    ch.put(CompSym.BVSHA, "fun");

    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FIX, "fix");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.ATOM, "atomsig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.BITVECTOR, "BitVector");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.UNTIL, "until");
    ch.put(CompSym.WHEN, "when");
    ch.put(CompSym.WHILE, "while");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
    TreeSet<String> list = new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static final String INT_LIB_NAME = "util" + java.io.File.separator + "integer";
  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (!filename.endsWith(INT_LIB_NAME + ".als"))
            u.addOpen(null, null, ExprVar.make(null, INT_LIB_NAME), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c) throws Err {
        if (n!=null) nod(n);
        int maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
        IntScope bitwidth=null;
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
            CommandScope cmdScope = s.get(i);
            Sig j=cmdScope.sig;
            int k=cmdScope.startingScope();
            p=p.merge(j.pos);
            if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
            if (j.label.equals("int"))  { if (bitwidth!=null) throw new ErrorSyntax(j.pos, "The scope for Int cannot be specified more than once."); bitwidth = toIntScope(cmdScope); s.remove(i); continue; }
            if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
        }
        if (n!=null)
            parser.alloymodule.addCommand(follow, p, n.label, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
        else
            parser.alloymodule.addCommand(follow, p, e,       o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
    }
    private IntScope toIntScope(CommandScope intScope) throws Err {
        if (intScope instanceof IntScope) return (IntScope)intScope;
        throw new ErrorFatal(intScope.pos, "Expected 'IntScope' for 'Int', got 'CommandScope' instead");
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // BaseExpr ::= LBRACE Declz RBRACE 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // BaseExpr ::= Super 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // BaseExpr ::= SigRef 
            {
              Expr RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BaseExpr ::= INTNEXT 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BaseExpr ::= INTMAX 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BaseExpr ::= INTMIN 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "this");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "iden");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BaseExpr ::= STR 
            {
              Expr RESULT =null;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // IntNum ::= MINUS NUMBER 
            {
              ExprConstant RESULT =null;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x.neg(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntNum",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // IntNum ::= NUMBER 
            {
              ExprConstant RESULT =null;
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntNum",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // UnopExprB ::= CARET UnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",94, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // UnopExprB ::= STAR UnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",94, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // UnopExprB ::= TILDE UnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",94, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // UnopExprB ::= BaseExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",94, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // UnopExprA ::= CARET UnopExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",93, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // UnopExprA ::= STAR UnopExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",93, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // UnopExprA ::= TILDE UnopExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",93, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // UnopExprA ::= CARET Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",93, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // UnopExprA ::= STAR Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",93, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // UnopExprA ::= TILDE Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",93, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // DotExprB ::= BracketExprB DOT SUM 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // DotExprB ::= BracketExprB DOT INT 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // DotExprB ::= BracketExprB DOT DISJ 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // DotExprB ::= UnopExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // DotExprA ::= BracketExprB DOT Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // DotExprA ::= UnopExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // BracketExprB ::= DotExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // BracketExprA ::= DotExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",4, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",68, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // RangeExprB ::= BracketExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",68, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // RangeExprA ::= RangeExprB RANGE Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",67, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // RangeExprA ::= BracketExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",67, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // DomainExprB ::= RangeExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // DomainExprA ::= RangeExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",71, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // RelationExprB ::= DomainExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",71, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // RelationExprA ::= DomainExprB RelOp Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",70, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // RelationExprA ::= DomainExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",70, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // RelOp ::= LONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // RelOp ::= LONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // RelOp ::= LONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // RelOp ::= LONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // RelOp ::= ONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // RelOp ::= ONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // RelOp ::= ONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // RelOp ::= ONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // RelOp ::= SOME_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // RelOp ::= SOME_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // RelOp ::= SOME_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // RelOp ::= SOME_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // RelOp ::= ANY_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // RelOp ::= ANY_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // RelOp ::= ANY_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // RelOp ::= ARROW 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",69, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // IntersectExprB ::= RelationExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",37, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // IntersectExprA ::= RelationExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",37, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",65, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // OverrideExprB ::= IntersectExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",65, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",64, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // OverrideExprA ::= IntersectExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",64, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NumUnopExprB ::= INT NumUnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",61, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // NumUnopExprB ::= SUM NumUnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",61, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // NumUnopExprB ::= HASH NumUnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",61, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // NumUnopExprB ::= BVNEG NumUnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.BVNEG.make(o, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",61, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // NumUnopExprB ::= BVNOT NumUnopExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.BVNOT.make(o, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",61, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // NumUnopExprB ::= OverrideExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",61, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // NumUnopExprA ::= INT NumUnopExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // NumUnopExprA ::= SUM NumUnopExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // NumUnopExprA ::= HASH NumUnopExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // NumUnopExprA ::= INT Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // NumUnopExprA ::= SUM Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // NumUnopExprA ::= HASH Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // NumUnopExprA ::= BVNEG Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.BVNEG.make(o, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // NumUnopExprA ::= BVNOT Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.BVNOT.make(o, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NumUnopExprA ::= OverrideExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",60, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",90, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",90, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",90, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // MulExprB ::= NumUnopExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",90, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // MulExprA ::= MulExprB INTREM Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",89, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // MulExprA ::= MulExprB INTDIV Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",89, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // MulExprA ::= MulExprB INTMUL Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",89, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // MulExprA ::= NumUnopExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",89, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // UnionDiffExprB ::= UnionDiffExprB BVSHA MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVSHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // UnionDiffExprB ::= UnionDiffExprB BVSHR MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVSHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // UnionDiffExprB ::= UnionDiffExprB BVSHL MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVSHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // UnionDiffExprB ::= UnionDiffExprB BVXOR MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVXOR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // UnionDiffExprB ::= UnionDiffExprB BVOR MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVOR.make(o, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // UnionDiffExprB ::= UnionDiffExprB BVAND MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVAND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // UnionDiffExprB ::= UnionDiffExprB BVEQ MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVEQ.make(o, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // UnionDiffExprB ::= MulExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",92, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // UnionDiffExprA ::= UnionDiffExprB BVSHA Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVSHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // UnionDiffExprA ::= UnionDiffExprB BVSHR Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVSHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // UnionDiffExprA ::= UnionDiffExprB BVSHL Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVSHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // UnionDiffExprA ::= UnionDiffExprB BVXOR Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVXOR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // UnionDiffExprA ::= UnionDiffExprB BVEQ Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVEQ.make(o, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // UnionDiffExprA ::= UnionDiffExprB BVOR Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVOR.make(o, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // UnionDiffExprA ::= UnionDiffExprB BVAND Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.BVAND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // UnionDiffExprA ::= MulExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",91, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",88, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",88, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",88, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ShiftExprB ::= UnionDiffExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",88, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",87, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",87, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",87, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ShiftExprA ::= UnionDiffExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",87, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CompareExprB ::= ShiftExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CompareExprB ::= SEQ ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CompareExprB ::= SET ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CompareExprB ::= ONE ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CompareExprB ::= LONE ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CompareExprB ::= SOME ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CompareExprB ::= NO ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CompareExprB ::= ALL ShiftExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CompareExprA ::= ShiftExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CompareExprA ::= SEQ ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CompareExprA ::= SET ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CompareExprA ::= ONE ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CompareExprA ::= LONE ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CompareExprA ::= SOME ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CompareExprA ::= NO ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CompareExprA ::= ALL ShiftExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NegExprB ::= NOT NegExprB 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",59, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NegExprB ::= CompareExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",59, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NegExprA ::= NOT NegExprA 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",58, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NegExprA ::= NOT Bind 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",58, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NegExprA ::= CompareExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",58, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // AndExprB ::= AndExprB AND NegExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // AndExprB ::= NegExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // AndExprA ::= AndExprB AND Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // AndExprA ::= NegExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",36, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",36, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",34, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ImpliesExprCloseB ::= AndExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",34, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ImpliesExprB ::= ImpliesExprOpenB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",32, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ImpliesExprB ::= ImpliesExprCloseB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",32, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",35, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ImpliesExprCloseA ::= AndExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ImpliesExprA ::= ImpliesExprOpenA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",31, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ImpliesExprA ::= ImpliesExprCloseA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",31, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // EquivExprB ::= ImpliesExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // EquivExprA ::= EquivExprB IFF Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // EquivExprA ::= ImpliesExprA 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OrExprB ::= OrExprB OR EquivExprB 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",63, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OrExprB ::= EquivExprB 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",63, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OrExprA ::= OrExprB OR Bind 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",62, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OrExprA ::= EquivExprA 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",62, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Bind ::= FIX Expr BAR Expr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprFix.Op.WHILE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Bind ::= FIX Expr WHILE Expr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprFix.Op.WHILE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Bind ::= FIX Expr UNTIL Expr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprFix.Op.UNTIL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Bind ::= SUM2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SUM .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Bind ::= SOME2 Declp WHEN Expr SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b, c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Bind ::= NO2 Declp WHEN Expr SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b, c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Bind ::= ALL2 Declp WHEN Expr SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b, c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Bind ::= SOME2 Declp BAR Expr BAR Expr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b, c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Bind ::= NO2 Declp BAR Expr BAR Expr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b, c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Bind ::= ALL2 Declp BAR Expr BAR Expr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b, c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Bind ::= ONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ONE .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Bind ::= LONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.LONE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Bind ::= SOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Bind ::= NO2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Bind ::= ALL2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Bind ::= LET Let 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Expr ::= Bind 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Expr ::= OrExprB 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Expr ::= OrExprA 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",23, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",29, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",29, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",28, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",28, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SuperOrBar ::= Super 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",27, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SuperOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",27, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SuperP ::= SuperP Expr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",26, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SuperP ::= Expr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",26, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Super ::= LBRACE RBRACE 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",24, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Super ::= LBRACE SuperP RBRACE 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",24, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SuperOpt ::= Super 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",25, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SuperOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",25, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Let ::= Name EQUALS Expr COMMA Let 
            {
              Expr RESULT =null;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",48, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Let ::= Name EQUALS Expr SuperOrBar 
            {
              Expr RESULT =null;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",48, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Decls ::= COMMA Decls 
            {
              List<Decl> RESULT =null;
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Decls ::= Declb COMMA Decls 
            {
              List<Decl> RESULT =null;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y; RESULT.add(0,x);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Decls ::= Declb 
            {
              List<Decl> RESULT =null;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Decls ::= 
            {
              List<Decl> RESULT =null;
		 RESULT=new ArrayList<Decl>();                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Declp ::= Declb 
            {
              List<Decl> RESULT =null;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Declp ::= Declp COMMA Declb 
            {
              List<Decl> RESULT =null;
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Declz ::= Decla 
            {
              List<Decl> RESULT =null;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Declz ::= Declz COMMA Decla 
            {
              List<Decl> RESULT =null;
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Declb ::= Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Declb ::= PART Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Declb ::= Names EQUALS Expr 
            {
              Decl RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Declb ::= PRIVATE Names EQUALS Expr 
            {
              Decl RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Declb ::= DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Declb ::= EXH Names EQUALS Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Declb ::= PART Names EQUALS Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Declb ::= Decla 
            {
              Decl RESULT =null;
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Decla ::= Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Decla ::= DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    d,    a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Decla ::= EXH Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Decla ::= PART Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Decla ::= Names COLON Expr 
            {
              Decl RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Decla ::= PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Decla ::= DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Decla ::= EXH Names COLON Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Decla ::= PART Names COLON Expr 
            {
              Decl RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Namex ::= Namex COMMA EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",57, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Namex ::= Namex COMMA Name 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b);              a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",57, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Namex ::= EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(null); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",57, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Namex ::= Name 
            {
              List<ExprVar> RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>();                   RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",57, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // AtomNames ::= AtomNames COMMA Name 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomNames",56, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // AtomNames ::= ID 
            {
              List<ExprVar> RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomNames",56, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Names ::= Names COMMA Name 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",55, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Names ::= Name 
            {
              List<ExprVar> RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",55, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprVar RESULT =null;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",54, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NameHelper ::= ID 
            {
              ExprVar RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",54, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ScopeName ::= THIS SLASH NameHelper 
            {
              ExprVar RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ScopeName",52, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ScopeName ::= NameHelper 
            {
              ExprVar RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ScopeName",52, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Name ::= SEQ SLASH NameHelper 
            {
              ExprVar RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",51, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Name ::= ScopeName 
            {
              ExprVar RESULT =null;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",51, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OpenName ::= DOT DOT SLASH OpenName 
            {
              ExprVar RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(n.pos), "../"+n.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OpenName",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OpenName ::= Name 
            {
              ExprVar RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OpenName",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SigRefu ::= SigRefu PLUS SigRef 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",81, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SigRefu ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",81, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",79, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SigRefp ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",79, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SigRefs ::= SigRefp 
            {
              List<ExprVar> RESULT =null;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",80, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SigRefs ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=new ArrayList<ExprVar>(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",80, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SigRef ::= NONE 
            {
              ExprVar RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "none");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SigRef ::= SEQ SLASH SIGINT 
            {
              ExprVar RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SigRef ::= SIGINT LPAREN IntTypeNumber RPAREN 
            {
              ExprVar RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprVar.make(x, "Int", a);            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SigRef ::= SIGINT 
            {
              ExprVar RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Int");               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SigRef ::= STRING 
            {
              ExprVar RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "String");            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SigRef ::= UNIV 
            {
              ExprVar RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "univ");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SigRef ::= Name 
            {
              ExprVar RESULT =null;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",78, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SigIn ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=null;                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",75, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SigIn ::= EQUALS SigRefu 
            {
              List<ExprVar> RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",75, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SigIn ::= IN SigRefu 
            {
              List<ExprVar> RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",75, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SigIn ::= EXTENDS SigRef 
            {
              List<ExprVar> RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",75, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SigQuals ::= SigQual SigQuals 
            {
              List<Pos> RESULT =null;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",77, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SigQuals ::= SIG 
            {
              List<Pos> RESULT =null;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",77, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SigQual ::= PRIVATE 
            {
              List<Pos> RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",76, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SigQual ::= SOME 
            {
              List<Pos> RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",76, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SigQual ::= ONE 
            {
              List<Pos> RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",76, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SigQual ::= LONE 
            {
              List<Pos> RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",76, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SigQual ::= ABSTRACT 
            {
              List<Pos> RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",76, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
              Object RESULT =null;
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   for(ExprVar bb:b) {
      parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)));
   }
 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",73, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Atom ::= ATOM AtomNames COLON SigRefu 
            {
              Object RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> names = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos in = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		List<ExprVar> superSig = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  for (ExprVar v : names) {
      parser.alloymodule.addSig(v.label, ExprVar.make(in, "colon"), superSig, new ArrayList<Decl>(0), ExprConstant.Op.TRUE.make(null, 0), AttrType.ATOM.make(a));
  }

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Atom",74, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Vis ::= PRIVATE 
            {
              Pos RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=p;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",95, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Vis ::= 
            {
              Pos RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",95, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",66, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",66, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",66, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Predicate ::= Vis PRED Name Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",66, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",66, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",66, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Function ::= Vis FUN Name COLON Expr Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MacroBody ::= EQUALS Expr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MacroBody ::= Super 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Macro ::= Vis LET Name MacroBody 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TypeNumber ::= IntTypeNumber 
            {
              CommandScope RESULT =null;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",84, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TypeNumber ::= ExactlyTypeNumber 
            {
              CommandScope RESULT =null;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",84, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExactlyTypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExactlyTypeNumber",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExactlyTypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExactlyTypeNumber",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExactlyTypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExactlyTypeNumber",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExactlyTypeNumber ::= EXACTLY NUMBER 
            {
              CommandScope RESULT =null;
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ExactlyTypeNumber",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IntTypeNumber ::= IntNum DOT DOT IntNum COLON NUMBER 
            {
              CommandScope RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num, true); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntTypeNumber",40, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IntTypeNumber ::= IntNum DOT DOT IntNum 
            {
              CommandScope RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1,     true); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntTypeNumber",40, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IntTypeNumber ::= NUMBER 
            {
              CommandScope RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1,     false); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntTypeNumber",40, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AtomEntryValS ::= BW LPAREN NUMBER RPAREN 
            {
              IntScope.AtomsKind RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Pos l = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new IntScope.AtomRange(a.merge(r), Util.min(n.num), Util.max(n.num), 1); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValS",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AtomEntryValS ::= LITERALS 
            {
              IntScope.AtomsKind RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new IntScope.AtomLiterals(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValS",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AtomEntryValS ::= IntNum DOT DOT IntNum COLON NUMBER 
            {
              IntScope.AtomsKind RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Pos p = a.pos.merge(i.pos); RESULT = new IntScope.AtomRange(p, a.num, b.num, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValS",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AtomEntryValS ::= IntNum DOT DOT IntNum 
            {
              IntScope.AtomsKind RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Pos p = a.pos.merge(b.pos); RESULT = new IntScope.AtomRange(p, a.num, b.num, 1); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValS",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AtomEntryValS ::= NUMBER 
            {
              IntScope.AtomsKind RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new IntScope.AtomRange(a.pos, a.num, a.num, 1); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValS",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AtomEntryValSList ::= AtomEntryValS COMMA AtomEntryValSList 
            {
              IntScope.AtomsKind RESULT =null;
		IntScope.AtomsKind f = (IntScope.AtomsKind)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		IntScope.AtomsKind r = (IntScope.AtomsKind)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = f.addAtoms(r); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValSList",47, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AtomEntryValSList ::= AtomEntryValS 
            {
              IntScope.AtomsKind RESULT =null;
		IntScope.AtomsKind a = (IntScope.AtomsKind)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryValSList",47, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AtomEntryVal ::= LBRACKET AtomEntryValSList RBRACKET 
            {
              IntScope.AtomsKind RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		IntScope.AtomsKind l = (IntScope.AtomsKind)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = l.withPos(a.merge(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryVal",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AtomEntryVal ::= BITWIDTH 
            {
              IntScope.AtomsKind RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new IntScope.AtomsFullBitwidth(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryVal",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AtomEntryVal ::= AtomEntryValS 
            {
              IntScope.AtomsKind RESULT =null;
		IntScope.AtomsKind a = (IntScope.AtomsKind)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AtomEntryVal",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // HashEntry ::= ATOMS COLON AtomEntryVal 
            {
              IntScope RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		IntScope.AtomsKind b = (IntScope.AtomsKind)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = IntScope.mkAtoms(b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("HashEntry",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // HashEntry ::= OF_BW COLON NUMBER 
            {
              IntScope RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = IntScope.mkOfBw(b.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("HashEntry",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // HashEntry ::= BITWIDTH COLON NUMBER 
            {
              IntScope RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = IntScope.mkBitwidth(b.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("HashEntry",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // HashEntries ::= HashEntry COMMA HashEntries 
            {
              IntScope RESULT =null;
		IntScope first = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		IntScope rest = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = first.merge(rest); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("HashEntries",43, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // HashEntries ::= HashEntry 
            {
              IntScope RESULT =null;
		IntScope he = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = he; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("HashEntries",43, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IntScopeHash ::= LBRACE HashEntries RBRACE 
            {
              IntScope RESULT =null;
		Pos l = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		IntScope a = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a.merge(IntScope.mkPos(l.merge(r))); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntScopeHash",42, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IntScope ::= IntScopeHash 
            {
              IntScope RESULT =null;
		IntScope a = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntScope",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IntScope ::= IntTypeNumber 
            {
              IntScope RESULT =null;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = a.isRange() ? IntScope.mkAtoms(new IntScope.AtomRange(a.pos, a.startingScope(), a.endingScope(), a.increment()))
                                                         : IntScope.mkBitwidth(a.startingScope()); 
                                    RESULT = RESULT.withPos(a.pos); 
                                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntScope",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Typescope ::= IntScopeHash ScopeName 
            {
              CommandScope RESULT =null;
		IntScope a = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   Pos p = a.pos.merge(b.pos);
   RESULT = new IntSubsetScope(p, new PrimSig(b.label, AttrType.WHERE.make(p)), a);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Typescope ::= TypeNumber ScopeName 
            {
              CommandScope RESULT =null;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   Pos p = a.pos.merge(b.pos);
   RESULT = new CommandScope(p, new PrimSig(b.label, AttrType.WHERE.make(p)), a.isExact(), a.startingScope(), a.endingScope(), a.increment());

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Typescope ::= TypeNumber NONE 
            {
              CommandScope RESULT =null;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Typescope ::= TypeNumber STRING 
            {
              CommandScope RESULT =null;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact(), a.startingScope(), a.endingScope(), a.increment()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Typescope ::= TypeNumber UNIV 
            {
              CommandScope RESULT =null;
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Typescope ::= NUMBER SEQ 
            {
              CommandScope RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), false, a.num, a.num, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Typescope ::= IntScope SIGINT 
            {
              CommandScope RESULT =null;
		IntScope a = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  Pos p = a.pos.merge(b);
  RESULT = a.merge(IntScope.mkPos(p));

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Typescope ::= IntScope INT 
            {
              CommandScope RESULT =null;
		IntScope a = (IntScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   // Pos p = a.pos.merge(b);
   // RESULT = a.withPos(p);
   Pos p = a.pos.merge(b);
   RESULT = a.merge(IntScope.mkPos(p));

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",85, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<CommandScope> RESULT =null;
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",86, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Typescopes ::= Typescope 
            {
              List<CommandScope> RESULT =null;
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",86, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Scope ::= 
            {
              List<CommandScope> RESULT =null;
		 RESULT=new ArrayList<CommandScope>();                                                                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",72, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Scope ::= FOR Typescopes 
            {
              List<CommandScope> RESULT =null;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",72, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Scope ::= FOR NUMBER BUT Typescopes 
            {
              List<CommandScope> RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",72, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Scope ::= FOR NUMBER 
            {
              List<CommandScope> RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",72, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expects ::= EXPECT NUMBER 
            {
              ExprConstant RESULT =null;
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",22, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expects ::= 
            {
              ExprConstant RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",22, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Command ::= Command IMPLIES CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Command ::= Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Command ::= CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Command ::= CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Command ::= Command IMPLIES CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Command ::= Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Command ::= CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Command ::= CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CommandPrefix ::= RUN 
            {
              ExprVar RESULT =null;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(r, "r"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CommandPrefix ::= CHECK 
            {
              ExprVar RESULT =null;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(c, "c"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Spec ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Spec ::= Spec Command 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Spec ::= Spec Macro 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Spec ::= Spec Predicate 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Spec ::= Spec Function 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Spec ::= Spec Atom 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Spec ::= Spec Sig 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Spec ::= Spec ASSERT STR Super 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Spec ::= Spec ASSERT Name Super 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Spec ::= Spec ASSERT Super 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Spec ::= Spec FACT STR Super 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= Spec FACT Name Super 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec FACT Super 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis OPEN OpenName LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis OPEN OpenName LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN OpenName AS Name 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN OpenName 
            {
              Object RESULT =null;
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET LT Names GT 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                        , c                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec MODULE Name LT Namex GT 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , new ArrayList<ExprVar>() , b                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                        , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>() , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",83, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
              Object RESULT =null;
		 parser.alloymodule.doneParsing(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",82, RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

